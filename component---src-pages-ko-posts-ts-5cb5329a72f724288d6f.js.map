{"version":3,"sources":["webpack:///./src/components/PostList.tsx","webpack:///./src/components/pages/posts.tsx","webpack:///./src/pages/ko/posts.ts","webpack:///./src/components/PageTitle.tsx"],"names":["PostList","postInfos","PostListRoot","map","postInfo","key","postPath","Post","PostRoot","PostLink","to","PostTitle","title","FlexSpacer","PostDate","date","PostExcerpt","dangerouslySetInnerHTML","__html","excerpt","Link","display","width","alignItems","flexWrap","C","flexDirection","marginBottom","fontSize","color","alignSelf","marginLeft","marginRight","marginTop","PostsPage","data","language","useLanguage","posts","refineData","SEO","description","pathname","NavigationBar","PageTitle","backgroundSrc","PostListWrapper","targetLanguage","targetGroup","allMarkdownPost","group","find","fieldValue","nodes","filter","post","draft","sort","post0","post1","Date","parse","dateForSort","parent","replace","Root","TitleText","height","backgroundPosition","backgroundSize","backgroundColor","backgroundImage","paddingLeft","fontWeight"],"mappings":"o+FAsBeA,EAXmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAChC,YAACC,EAAD,KAEID,EAAUE,KAAI,SAACC,GAAD,OACZ,YAAC,WAAD,CAAUC,IAAKD,EAASE,UACtB,YAAC,EAAD,CAAMF,SAAUA,UAepBF,EAAe,4FASfK,EAA4B,SAAC,GAAiB,IAAfH,EAAe,EAAfA,SACnC,OACE,YAACI,EAAD,KACE,YAACC,EAAD,CAAUC,GAAIN,EAASE,UACrB,YAACK,EAAD,KAAYP,EAASQ,OACrB,YAACC,EAAA,EAAD,MACA,YAACC,EAAD,KAAWV,EAASW,MACpB,YAACC,EAAD,CACEC,wBAAyB,CAAEC,OAAQd,EAASe,cAOhDX,EAAW,gGAMXC,EAAW,YAAOW,OAAP,0BACfC,QAAS,OAETC,MAAO,OAEPC,WAAY,SACZC,SAAU,SAETC,IAAe,IAAK,CACnBC,cAAe,SACfH,WAAY,cAVC,IAcXZ,EAAY,2CAChBgB,aAAc,QAEdC,SAAUH,IACVI,MAAOJ,MAENA,IAAe,IAAK,CACnBE,aAAc,EAEdC,SAAUH,KATI,IAaZX,EAAW,6CACfc,SAAUH,IACVI,MAAOJ,MAENA,IAAe,IAAK,CACnBK,UAAW,YALE,IAaXd,EAAc,4CAClBe,WAAY,MAEZT,MAAO,mBAEPM,SAAUH,IACVI,MAAOJ,IAEP,IAAK,CACHJ,QAAS,UAGX,yBAA0B,CACxBA,QAAS,UAGVI,IAAe,IAAK,CACnBM,WAAY,QACZC,YAAa,QACbC,UAAW,QAEXL,SAAUH,KArBM,I,YC1FpB,IAwBeS,EAxBgC,WAC7C,IAAMC,EAAO,OACPC,EAAWC,cAEXC,EAAQC,EAAWJ,EAAMC,GAE/B,OACE,8BACE,YAACI,EAAA,EAAD,CACE5B,MAAM,QACN6B,YAAY,uBACZC,SAAQ,IAAMN,EAAN,WAEV,YAACO,EAAA,EAAD,MACA,YAACC,EAAA,EAAD,CACEC,cAAc,0EACdjC,MAAM,UAER,YAACkC,EAAD,KACE,YAAC,EAAD,CAAU7C,UAAWqC,OA+CvBC,EAAa,SAACJ,EAAYY,GAAyC,MACjEC,EACJb,EAAKc,gBAAgBC,MAClBC,MAAK,qBAAGC,aAAgCL,KAE7C,OAAO,UAACC,aAAD,EAACA,EAAaK,aAAd,QAAuB,IAC3BC,QAAO,SAACC,GAAD,OAAqDA,EAAKC,SACjEC,MAAK,SAACC,EAAOC,GAAR,OAAkBC,KAAKC,MAAMF,EAAMG,aAAeF,KAAKC,MAAMH,EAAMI,gBACxE3D,KAAI,cAAG2D,YAAH,EAAgBN,MAAhB,IAAuBO,EAAvB,EAAuBA,OAAW3D,E,oIAAlC,6DACAA,EADA,CAGHe,QAAS4C,EAAO5C,QACb6C,QAAQ,OAAQ,OAChBA,QAAQ,OAAQ,OAChBA,QAAQ,SAAU,cAIrBlB,EAAkB,6HC7FTZ,a,0FCYAU,IALoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAejC,EAAlB,EAAkBA,MAAlB,OACjC,YAACqD,EAAD,CAAMpB,cAAeA,GACnB,YAACqB,EAAD,KAAYtD,KAQhB,IAAMqD,EAAO,gDACX5C,QAAS,OAETC,MAAO,OACP6C,OAAQ,OAERC,mBAAoB,SACpBC,eAAgB,QAChBC,gBAAiB,QAEjB/C,WAAY,WAEXE,IAAe,IAAK,CACnB0C,OAAQ,OAERC,mBAAoB,SAfX,IAiBV,kBAAwB,CACzBG,gBAAiB,QADhB,EAAG1B,cACW,SAGXqB,EAAY,4CAChBM,YAAa,KAEb3C,MAAOJ,IACPgD,WAAY,OACZ7C,SAAUH,MAETA,IAAe,IAAK,CACnBG,SAAUH,KARI","file":"component---src-pages-ko-posts-ts-5cb5329a72f724288d6f.js","sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\n\nexport interface Props {\n  readonly postInfos: PostInfo[];\n}\nconst PostList: React.FC<Props> = ({ postInfos }) => (\n  <PostListRoot>\n    {\n      postInfos.map((postInfo) => (\n        <Fragment key={postInfo.postPath}>\n          <Post postInfo={postInfo} />\n        </Fragment>\n      ))\n    }\n  </PostListRoot>\n);\nexport default PostList;\n\nexport interface PostInfo {\n  readonly title: string;\n  readonly date: string;\n  readonly excerpt: string;\n  readonly postPath: string;\n}\n\nconst PostListRoot = styled.ul({\n  width: '100%',\n\n  listStyle: 'none',\n});\n\ninterface PostProps {\n  postInfo: PostInfo;\n}\nconst Post: React.FC<PostProps> = ({ postInfo }) => {\n  return (\n    <PostRoot>\n      <PostLink to={postInfo.postPath}>\n        <PostTitle>{postInfo.title}</PostTitle>\n        <FlexSpacer />\n        <PostDate>{postInfo.date}</PostDate>\n        <PostExcerpt\n          dangerouslySetInnerHTML={{ __html: postInfo.excerpt }}\n        />\n      </PostLink>\n    </PostRoot>\n  );\n};\n\nconst PostRoot = styled.li({\n  marginBottom: '40px',\n\n  width: '100%',\n});\n\nconst PostLink = styled(Link)({\n  display: 'flex',\n\n  width: '100%',\n\n  alignItems: 'center',\n  flexWrap: 'wrap',\n\n  [C.mediaQueries[0]]: {\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n});\n\nconst PostTitle = styled.h3({\n  marginBottom: '0.5em',\n\n  fontSize: C.fontLargeSize,\n  color: C.textBlack,\n\n  [C.mediaQueries[0]]: {\n    marginBottom: 0,\n\n    fontSize: C.fontBaseSize,\n  },\n});\n\nconst PostDate = styled.span({\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n\n  [C.mediaQueries[0]]: {\n    alignSelf: 'flex-end',\n  },\n});\n\n/**\n * This component should use `div` or similar to display\n * inner `p`, `h1`, etc.\n */\nconst PostExcerpt = styled.div({\n  marginLeft: '1em',\n\n  width: 'calc(100% - 1em)',\n\n  fontSize: C.fontBaseSize,\n  color: C.textLightBlack,\n\n  '*': {\n    display: 'inline',\n  },\n\n  'h1, h2, h3, h4, h5, h6': {\n    display: 'none',\n  },\n\n  [C.mediaQueries[0]]: {\n    marginLeft: '0.5em',\n    marginRight: '0.5em',\n    marginTop: '0.5em',\n\n    fontSize: C.fontSmallSize,\n  },\n});\n","import styled from '@emotion/styled';\nimport { PageRendererProps, graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../../hooks/useLanguage';\nimport type { Language } from '../../utils/languages';\nimport NavigationBar from '../NavigationBar';\nimport PageTitle from '../PageTitle';\nimport PostList, { PostInfo } from '../PostList';\nimport SEO from '../SEO';\n\nconst PostsPage: React.FC<PageRendererProps> = () => {\n  const data = useStaticQuery<Data>(query);\n  const language = useLanguage();\n\n  const posts = refineData(data, language);\n\n  return (\n    <>\n      <SEO\n        title='Posts'\n        description='List of Posts in VoV'\n        pathname={`/${language}/posts`}\n      />\n      <NavigationBar />\n      <PageTitle\n        backgroundSrc='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/post.png'\n        title='Posts'\n      />\n      <PostListWrapper>\n        <PostList postInfos={posts} />\n      </PostListWrapper>\n    </>\n  );\n};\nexport default PostsPage;\n\ninterface Data {\n  readonly allMarkdownPost: {\n    readonly group: {\n      readonly fieldValue: Language;\n      readonly nodes: DataMarkdownPost[];\n    }[];\n  };\n}\ninterface DataMarkdownPost {\n  readonly title: string;\n  readonly date: string;\n  readonly dateForSort: string;\n  readonly postPath: string;\n  readonly draft: boolean;\n  readonly parent: {\n    readonly excerpt: string;\n  };\n} \nconst query = graphql`\n  query {\n    allMarkdownPost {\n      group(field: language) {\n        fieldValue\n        nodes {\n          title\n          date(fromNow: true)\n          dateForSort: date\n          postPath\n          draft\n          parent {\n            ... on MarkdownRemark {\n              excerpt(format: HTML, pruneLength: 100, truncate: true)\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst refineData = (data: Data, targetLanguage: Language): PostInfo[] => {\n  const targetGroup =\n    data.allMarkdownPost.group\n      .find(({ fieldValue }) => fieldValue === targetLanguage);\n\n  return (targetGroup?.nodes ?? [])\n    .filter((post) => process.env.NODE_ENV === 'development' || !post.draft)\n    .sort((post0, post1) => Date.parse(post1.dateForSort) - Date.parse(post0.dateForSort))\n    .map(({ dateForSort, draft, parent, ...postInfo }) => ({\n      ...postInfo,\n      /* Try to make the excerpt WAI compatible */\n      excerpt: parent.excerpt\n        .replace(/<a>/g, '<p>')\n        .replace(/<a /g, '<p ')\n        .replace(/<\\/a>/g, '</p>'),\n    }));\n};\n\nconst PostListWrapper = styled.main({\n  margin: '0 20vw',\n  marginTop: '60px',\n\n  width: '60vw',\n  minHeight: '50vh',\n});\n","import PostsPage from '../../components/pages/posts';\n\nexport default PostsPage;\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport * as C from '../styles/constants';\n\nexport interface Props {\n  readonly backgroundSrc: string;\n  readonly title: string;\n}\nconst PageTitle: React.FC<Props> = ({ backgroundSrc, title }) => (\n  <Root backgroundSrc={backgroundSrc}>\n    <TitleText>{title}</TitleText>\n  </Root>\n);\nexport default PageTitle;\n\ninterface RootProps {\n  readonly backgroundSrc: string;\n}\nconst Root = styled.header<RootProps>({\n  display: 'flex',\n\n  width: '100%',\n  height: '24vw',\n\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundColor: 'black',\n\n  alignItems: 'center',\n\n  [C.mediaQueries[0]]: {\n    height: '44vw',\n\n    backgroundPosition: 'right',\n  },\n}, ({ backgroundSrc }) => ({\n  backgroundImage: `url('${backgroundSrc}')`,\n}));\n\nconst TitleText = styled.h1({\n  paddingLeft: '7%',\n\n  color: C.textWhite,\n  fontWeight: 'bold',\n  fontSize: C.fontGiantSize,\n\n  [C.mediaQueries[0]]: {\n    fontSize: C.fontHugeSize,\n  },\n});\n"],"sourceRoot":""}