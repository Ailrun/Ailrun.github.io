{"version":3,"sources":["webpack:///./src/pages/about.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/NavigationBar.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO.tsx","webpack:///./src/components/Layout.tsx"],"names":["AboutPage","data","className","Title","Subjects","subjects","json","src","map","subject","i","Subject","key","title","entries","entry","Entry","loader","enqueue","React","createContext","NavigationBar","to","text","NavigationBarItem","m","module","exports","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","SEO","site","siteMetadata","name","content","description","url","href","rel","author","property","image","locales","locale","index","Layout","children"],"mappings":"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","file":"component---src-pages-about-tsx-451e78e92678a43ed958.js","sourcesContent":["import { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport Layout from '../components/Layout';\nimport NavigationBar from '../components/NavigationBar';\n\nconst AboutPage: React.FC<unknown> = () => {\n  const data = useStaticQuery<any>(query);\n\n  return (\n    <Layout>\n      <NavigationBar />\n      <section className='ailrun-blog-about-page'>\n        <Title />\n        <Subjects subjects={data.json.subjects} />\n      </section>\n    </Layout>\n  );\n};\nexport default AboutPage;\n\nconst query = graphql`\n  query {\n    json: aboutJson {\n      subjects {\n        entries\n        title\n      }\n    }\n  }\n`;\n\nconst Title: React.FC<unknown> = () => {\n  return (\n    <section className='ailrun-blog-page-title'>\n      <img src='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/about.png' />\n      <header>\n        <h1>About</h1>\n      </header>\n    </section>\n  );\n};\n\nconst Subjects: React.FC<any> = ({ subjects }) => {\n  return (\n    <section className='ailrun-blog-page-main'>\n      <h2>Junyoung Clare Jang</h2>\n      <div className='ailrun-blog-align-left'>\n      {\n        subjects.map((subject: any, i: number) => (\n          <Subject key={i} {...{ subject }} />\n        ))\n      }\n      </div>\n      <div className='ailrun-blog-align-right'>\n        <img src='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/about-profile.png' />\n        <h3>Clare with cups of beer</h3>\n      </div>\n    </section>\n  );\n};\n\nconst Subject: React.FC<any> = ({ subject }) => {\n  return (\n    <article>\n      <h3>{subject.title}</h3>\n      <p>\n        <ul>\n          {\n            subject.entries.map((entry: any, i: number) => (\n              <Entry key={i} {...{ entry }} />\n            ))\n          }\n        </ul>\n      </p>\n    </article>\n  );\n};\n\nconst Entry: React.FC<any> = ({ entry }) => {\n  return (\n    <li>\n      - {entry}\n    </li>\n  );\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nconst NavigationBar: React.FC<unknown> = () => {\n  return (\n    <header className='ailrun-blog-navigation-bar'>\n      <h1>\n        <Link to='/'>\n          Valhala of Valkyrie\n        </Link>\n      </h1>\n      <ul>\n        <NavigationBarItem to='/' text='Main' />\n        <NavigationBarItem to='/projects' text='Projects' />\n        <NavigationBarItem to='/about' text='About' />\n      </ul>\n    </header>\n  );\n};\nexport default NavigationBar;\n\ninterface ItemProps {\n  to: string;\n  text: string;\n}\n\nconst NavigationBarItem: React.FC<ItemProps> = ({ to, text }) => {\n  return (\n    <li>\n      <Link to={to}>\n        {text}\n      </Link>\n    </li>\n  );\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\n\nconst SEO: React.FC<unknown> = () => {\n  const data = useStaticQuery<any>(query);\n\n  return (\n    <Helmet>\n      <title>{data.site.siteMetadata.title}</title>\n      <meta name='description' content={data.site.siteMetadata.description} />\n      <meta name='url' content={data.site.siteMetadata.url} />\n      <base href='/' />\n      <link rel='author' href={data.site.siteMetadata.author} />\n      <link rel='index' href={data.site.siteMetadata.url} />\n\n      <meta property='og:type' content='website' />\n      <meta property='og:title' content={data.site.siteMetadata.title} />\n      <meta property='og:description' content={data.site.siteMetadata.description} />\n      <meta property='og:url' content={data.site.siteMetadata.url} />\n      <meta property='og:image' content={data.site.siteMetadata.image} />\n      {\n        data.site.siteMetadata.locales.map((locale: string, index: number) => {\n          if (index === 0) {\n            return (\n              <meta key={'locale' + index} property='og:locale' content={locale} />\n            );\n          } else {\n            return (\n              <meta key={'locale' + index} property='og:locale:alternate' content={locale} />\n            );\n          }\n        })\n      }\n      <meta property='og:site_name' content={data.site.siteMetadata.title} />\n\n      <meta name='twitter:card' content='summary' />\n      <meta name='twitter:title' content={data.site.siteMetadata.title} />\n      <meta name='twitter:description' content={data.site.siteMetadata.description} />\n      <meta name='twitter:image' content={data.site.siteMetadata.image} />\n    </Helmet>\n  );\n};\nexport default SEO;\n\nconst query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        url\n        image\n        author\n        locales\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nimport SEO from './SEO';\n\nconst Layout: React.FC<unknown> = ({ children }) => {\n  return (\n    <>\n      <SEO />\n      {children}\n    </>\n  );\n};\nexport default Layout;\n"],"sourceRoot":""}