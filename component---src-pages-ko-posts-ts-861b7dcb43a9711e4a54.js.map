{"version":3,"file":"component---src-pages-ko-posts-ts-861b7dcb43a9711e4a54.js","mappings":"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","sources":["webpack://valhala-of-valkyrie/./src/components/PageTitle.tsx","webpack://valhala-of-valkyrie/./src/components/PostList.tsx","webpack://valhala-of-valkyrie/./src/components/pages/posts.tsx","webpack://valhala-of-valkyrie/./src/pages/ko/posts.ts"],"sourcesContent":["import styled from '@emotion/styled';\nimport React from 'react';\n\nimport * as C from '../styles/constants';\n\nexport interface Props {\n  readonly backgroundSrc: string;\n  readonly title: string;\n}\nconst PageTitle: React.FC<Props> = ({ backgroundSrc, title }) => (\n  <Root backgroundSrc={backgroundSrc}>\n    <TitleText>{title}</TitleText>\n  </Root>\n);\nexport default PageTitle;\n\ninterface RootProps {\n  readonly backgroundSrc: string;\n}\nconst Root = styled.header<RootProps>({\n  display: 'flex',\n\n  width: '100%',\n  height: '24vw',\n\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundColor: 'black',\n\n  alignItems: 'center',\n\n  [C.mediaQueries[0]]: {\n    height: '44vw',\n\n    backgroundPosition: 'right',\n  },\n}, ({ backgroundSrc }) => ({\n  backgroundImage: `url('${backgroundSrc}')`,\n}));\n\nconst TitleText = styled.h1({\n  paddingLeft: '7%',\n\n  color: C.textWhite,\n  fontWeight: 'bold',\n  fontSize: C.fontGiantSize,\n\n  [C.mediaQueries[0]]: {\n    fontSize: C.fontHugeSize,\n  },\n});\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\n\nexport interface Props {\n  readonly postInfos: PostInfo[];\n}\nconst PostList: React.FC<Props> = ({ postInfos }) => (\n  <PostListRoot>\n    {\n      postInfos.map((postInfo) => (\n        <Fragment key={postInfo.postPath}>\n          <Post postInfo={postInfo} />\n        </Fragment>\n      ))\n    }\n  </PostListRoot>\n);\nexport default PostList;\n\nexport interface PostInfo {\n  readonly title: string;\n  readonly date: string;\n  readonly excerpt: string;\n  readonly postPath: string;\n}\n\nconst PostListRoot = styled.ul({\n  width: '100%',\n\n  listStyle: 'none',\n});\n\ninterface PostProps {\n  postInfo: PostInfo;\n}\nconst Post: React.FC<PostProps> = ({ postInfo }) => {\n  return (\n    <PostRoot>\n      <PostLink to={postInfo.postPath}>\n        <PostTitle>{postInfo.title}</PostTitle>\n        <FlexSpacer />\n        <PostDate>{postInfo.date}</PostDate>\n        <PostExcerpt\n          dangerouslySetInnerHTML={{ __html: postInfo.excerpt }}\n        />\n      </PostLink>\n    </PostRoot>\n  );\n};\n\nconst PostRoot = styled.li({\n  marginBottom: '40px',\n\n  width: '100%',\n});\n\nconst PostLink = styled(Link)({\n  display: 'flex',\n\n  width: '100%',\n\n  alignItems: 'center',\n  flexWrap: 'wrap',\n\n  [C.mediaQueries[0]]: {\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n});\n\nconst PostTitle = styled.h3({\n  marginBottom: '0.5em',\n\n  fontSize: C.fontLargeSize,\n  color: C.textBlack,\n\n  [C.mediaQueries[0]]: {\n    marginBottom: 0,\n\n    fontSize: C.fontBaseSize,\n  },\n});\n\nconst PostDate = styled.span({\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n\n  [C.mediaQueries[0]]: {\n    alignSelf: 'flex-end',\n  },\n});\n\n/**\n * This component should use `div` or similar to display\n * inner `p`, `h1`, etc.\n */\nconst PostExcerpt = styled.div({\n  marginLeft: '1em',\n\n  width: 'calc(100% - 1em)',\n\n  fontSize: C.fontBaseSize,\n  color: C.textLightBlack,\n\n  '*': {\n    display: 'inline',\n  },\n\n  'h1, h2, h3, h4, h5, h6': {\n    display: 'none',\n  },\n\n  [C.mediaQueries[0]]: {\n    marginLeft: '0.5em',\n    marginRight: '0.5em',\n    marginTop: '0.5em',\n\n    fontSize: C.fontSmallSize,\n  },\n});\n","import styled from '@emotion/styled';\nimport { PageProps, graphql, HeadProps } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../../hooks/useLanguage';\nimport { Language, locationToLanguage } from '../../utils/languages';\nimport NavigationBar from '../NavigationBar';\nimport PageTitle from '../PageTitle';\nimport PostList, { PostInfo } from '../PostList';\nimport SEO from '../SEO';\n\nconst PostsPage: React.FC<PageProps<Queries.MarkdownPostsInformationFragment>> = ({ data }) => {\n  const language = useLanguage();\n\n  const posts = refineData(data, language);\n\n  return (\n    <>\n      <NavigationBar />\n      <PageTitle\n        backgroundSrc='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/post.png'\n        title='Posts'\n      />\n      <PostListWrapper>\n        <PostList postInfos={posts} />\n      </PostListWrapper>\n    </>\n  );\n};\nexport default PostsPage;\n\nexport const Head: React.FC<HeadProps<Queries.SEOInformationFragment>> = ({ location, data }) => {\n  const language = locationToLanguage(location);\n\n  return (\n    <SEO\n      title='Posts'\n      description='List of Posts in VoV'\n      pathname={`/${language}/posts`}\n      data={data}\n    />\n  );\n};\n\nexport const query = graphql`\n  fragment MarkdownPostsInformation on Query {\n    allMarkdownPost {\n      group(field: {language: SELECT}) {\n        fieldValue\n        nodes {\n          title\n          date(fromNow: true)\n          dateForSort: date\n          postPath\n          draft\n          parent {\n            ... on MarkdownRemark {\n              excerpt(format: HTML, pruneLength: 100, truncate: true)\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst refineData = (data: Queries.MarkdownPostsInformationFragment, targetLanguage: Language): PostInfo[] => {\n  const targetGroup =\n    data.allMarkdownPost.group\n      .find(({ fieldValue }) => fieldValue === targetLanguage);\n\n  return (targetGroup?.nodes ?? [])\n    .filter((post) => process.env.NODE_ENV === 'development' || !post.draft)\n    .sort((post0, post1) => Date.parse(post1.dateForSort!) - Date.parse(post0.dateForSort!))\n    .map(({ title, date, postPath, parent }) => ({\n      title: title!,\n      date: date!,\n      postPath: postPath!,\n      /* Try to make the excerpt WAI compatible */\n      excerpt: 'excerpt' in parent!\n        ? parent!.excerpt!\n          .replace(/<a>/g, '<span>')\n          .replace(/<a /g, '<span ')\n          .replace(/<\\/a>/g, '</span>')\n        : '',\n    }));\n};\n\nconst PostListWrapper = styled.main({\n  margin: '0 20vw',\n  marginTop: '60px',\n\n  width: '60vw',\n  minHeight: '50vh',\n});\n","import { graphql } from 'gatsby';\n\nimport PostsPage, { Head } from '../../components/pages/posts';\n\nexport default PostsPage;\nexport {\n  Head,\n};\nexport const query = graphql`\n  query {\n    ...MarkdownPostsInformation\n    ...SEOInformation\n  }\n`;\n"],"names":["_ref","backgroundSrc","title","___EmotionJSX","Root","TitleText","_styled","display","width","height","backgroundPosition","backgroundSize","backgroundColor","alignItems","C","_ref2","backgroundImage","paddingLeft","color","fontWeight","fontSize","postInfos","PostListRoot","map","postInfo","Fragment","key","postPath","Post","PostRoot","PostLink","to","PostTitle","FlexSpacer","PostDate","date","PostExcerpt","dangerouslySetInnerHTML","__html","excerpt","Link","flexWrap","flexDirection","marginBottom","alignSelf","marginLeft","marginRight","marginTop","data","language","useLanguage","posts","refineData","NavigationBar","PageTitle","PostListWrapper","PostList","Head","location","locationToLanguage","SEO","description","pathname","targetLanguage","targetGroup","allMarkdownPost","group","find","_ref3","fieldValue","nodes","filter","post","draft","sort","post0","post1","Date","parse","dateForSort","_ref4","parent","replace"],"sourceRoot":""}