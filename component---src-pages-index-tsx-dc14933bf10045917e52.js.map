{"version":3,"sources":["webpack:///./src/pages/index.tsx"],"names":["MainPage","data","banners","useMemo","json","map","bannerData","i","Banner","key","isLeft","Wrapper","lineHeight","color","C","BannerWrapper","BannerImage","src","background","BannerHeader","title","description","BannerLink","to","link","linkTitle","position","width","height","bannerHeight","backgroundColor","display","top","bottom","marginTop","div","verticalAlign","h3","fontSize","p","whiteSpace","left","Link"],"mappings":"yaAiCeA,UAjBqB,WAClC,IAAMC,EAAO,OACPC,EAAUC,mBAAQ,WACtB,OAAOF,EAAKG,KAAKF,QAAQG,KAAI,SAACC,EAAYC,GAAb,OAC3B,YAACC,EAAD,GAAQC,IAAKF,GAAO,CAAED,aAAYI,OAAQH,EAAI,GAAM,UAErD,CAACN,IAEJ,OACE,YAAC,IAAD,KACE,YAAC,IAAD,MACA,YAACU,EAAD,KACGT,KAqBT,IAAMS,EAAU,2CAAe,CAC7BC,WAAY,IACZC,MAAOC,MAQHN,EAAgC,SAAC,GAAD,IAAGF,EAAH,EAAGA,WAAYI,EAAf,EAAeA,OAAf,OACpC,YAACK,EAAD,KACE,YAACC,EAAD,CAAaC,IAAKX,EAAWY,aAC7B,YAACC,EAAiB,CAAET,UAClB,uBACE,sBAAKJ,EAAWc,OAChB,qBAAId,EAAWe,eAGnB,YAACC,EAAD,CAAYC,GAAIjB,EAAWkB,MACxBlB,EAAWmB,UAAY,QAOxBV,EAAgB,2CAAe,CACnCW,SAAU,WAEVC,MAAO,OACPC,OAAWC,OAEXC,gBAAiB,UAGbd,EAAc,kHAOdG,EAAe,0CAAmC,CACtDY,QAAS,eACTL,SAAU,WACVM,IAAK,MACLC,OAAQ,MAERC,UAAc,QAEdN,OAAWC,OAEXjB,WAAeiB,OAEfM,IAAK,CACHJ,QAAS,eAETK,cAAe,SACfxB,WAAY,KAGdyB,GAAI,CACFC,SAAUxB,KAGZyB,EAAG,CACDC,WAAY,WACZF,SAAUxB,OAEX,kBAAiB,CAClB2B,KADC,EAAG/B,OACW,KAAO,UAGlBY,EAAa,YAAOoB,IAAP,qG","file":"component---src-pages-index-tsx-dc14933bf10045917e52.js","sourcesContent":["import styled from '@emotion/styled';\nimport { graphql, useStaticQuery, Link } from 'gatsby';\nimport React, { useMemo } from 'react';\n\nimport * as C from '../constants';\nimport Layout from '../components/Layout';\nimport NavigationBar from '../components/NavigationBar';\n\ninterface Banner {\n  readonly background: string;\n  readonly description: string;\n  readonly link: string;\n  readonly linkTitle: string;\n  readonly title: string;\n}\n\nconst MainPage: React.FC<unknown> = () => {\n  const data = useStaticQuery<{ json: { banners: Banner[]; }; }>(query);\n  const banners = useMemo(() => {\n    return data.json.banners.map((bannerData, i) => (\n      <Banner key={i} {...{ bannerData, isLeft: i % 2 !== 0 }} />\n    ));\n  }, [data]);\n\n  return (\n    <Layout>\n      <NavigationBar />\n      <Wrapper>\n        {banners}\n      </Wrapper>\n    </Layout>\n  );\n};\nexport default MainPage;\n\nconst query = graphql`\n  query {\n    json: mainJson {\n      banners {\n        background\n        description\n        link\n        linkTitle\n        title\n      }\n    }\n  }\n`;\n\nconst Wrapper = styled.section({\n  lineHeight: 1.3,\n  color: C.textWhite,\n});\n\ninterface BannerProps {\n  bannerData: Banner;\n  isLeft: boolean;\n}\n\nconst Banner: React.FC<BannerProps> = ({ bannerData, isLeft }) => (\n  <BannerWrapper>\n    <BannerImage src={bannerData.background} />\n    <BannerHeader {...{ isLeft }}>\n      <div>\n        <h3>{bannerData.title}</h3>\n        <p>{bannerData.description}</p>\n      </div>\n    </BannerHeader>\n    <BannerLink to={bannerData.link}>\n      {bannerData.linkTitle + \" >\"}\n    </BannerLink>\n  </BannerWrapper>\n);\n\nconst bannerHeight = 26;\n\nconst BannerWrapper = styled.article({\n  position: 'relative',\n\n  width: '100%',\n  height: `${bannerHeight}vw`,\n\n  backgroundColor: 'black',\n});\n\nconst BannerImage = styled.img({\n  position: 'absolute',\n\n  width: 'inherit',\n  height: 'inherit',\n});\n\nconst BannerHeader = styled.header<{ isLeft: boolean }>({\n  display: 'inline-block',\n  position: 'absolute',\n  top: '50%',\n  bottom: '50%',\n\n  marginTop: `${- bannerHeight / 2}vw`,\n\n  height: `${bannerHeight}vw`,\n\n  lineHeight: `${bannerHeight}vw`,\n\n  div: {\n    display: 'inline-block',\n\n    verticalAlign: 'middle',\n    lineHeight: 1.3,\n  },\n\n  h3: {\n    fontSize: C.fontHugeSize,\n  },\n\n  p: {\n    whiteSpace: 'pre-wrap',\n    fontSize: C.fontLargeSize,\n  },\n}, ({ isLeft }) => ({\n  left: isLeft ? '7%' : '73%',\n}));\n\nconst BannerLink = styled(Link)({\n  position: 'absolute',\n  right: '2%',\n  bottom: '1vw',\n\n  color: 'inherit',\n});\n"],"sourceRoot":""}