{"componentChunkName":"component---src-templates-post-template-tsx","path":"/ko/post/logic-for-programmers-000/","result":{"data":{"post":{"frontmatter":{"title":"프로그래머를 위한 논리학 - 0","date":"5 days ago"},"html":"<h1 id=\"들어가며\" style=\"position:relative;\"><a href=\"#%EB%93%A4%EC%96%B4%EA%B0%80%EB%A9%B0\" aria-label=\"들어가며 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>들어가며</h1>\n<p>개발자 생활을 하다보면 한 번쯤 듣게 되는 (혹은 보게 되는) 말이 있다. 바로</p>\n<blockquote>\n<p>좋은 개발자가 되려면 수학(혹은 논리학)을 배워야지!</p>\n</blockquote>\n<p>이다. 물론 필자가 이런 주장에 완전히 동의한다는 말은 아니다. 그러나 누군가 위 주장을 아래와 같이 조금 수정한다면, 필자는 언제 어디서든지 동의할 의사가 있다.</p>\n<blockquote>\n<p>함수형 개발을 잘 하는 개발자가 되려면 수학(혹은 논리학)을 배워야지!</p>\n</blockquote>\n<p>좀 더 나아가서 필자가 좌우명으로 삼고 싶을 정도로 바꿀 수도 있다.</p>\n<blockquote>\n<p>강한 자료형 언어로 개발을 잘 하려면 수학<strong>과</strong> 논리학을 배워야지!</p>\n</blockquote>\n<p>그렇다. 필자는 강한 자료형 언어를 사용하는 개발자는 개발을 배우기 전이던 배운 후던 간에 적어도 언젠가는 수학과 논리학을 배워야한다고 생각한다. 특히 그 언어를 잘 하고 싶다는 생각을 가지고 있다면 더더욱 그래야한다고 생각한다.</p>\n<p>이는 그런 언어의 고급 개념들이 수학 혹은 논리학에서 비롯했거나 십분 이용하고 있다는 점에 근거한다. 그런 언어들이 기반하고 있는 자료형 이론자체가 수학에서 비롯되었다는 사실이 그 예시이다. OCaml의 함자(Functor)와 Haskell의 (악명높은) 모나드(Monad) 또한 수학에 이미 존재하는 개념으로부터 그 이름을 따왔을 뿐 아니라 원래 개념과 깊은 관련성을 가지고 있다는 점도 빼놓을 수 없으며, C++/Java 사용자가 익숙할 템플릿(Template)/제네릭(Generics)도 수학의 다형 람다 대수(Polymorphic lambda calculus)에 그 뿌리를 두고 있다는 것 또한 특기할만 하다. 복잡한 개념뿐만이 아니라 비교적 간단하고 널리 사용되는 개념들 또한 수학 혹은 논리학에서 유래했거나 깊히 관련된 것이 많은데, 재귀(Recursion)라던가 고차 함수(Higher order function), 변수의 유효범위(Scope)가 그런 예시들이다.</p>\n<p>이런 개념의 연관성을 떠나서 좀 더 실용적인 측면에서도 수학과 논리학은 개발에 영향을 미치고 있다. 유명한 C 컴파일러(Compiler) 중 하나인 GCC의 수십 개의 버그(Bug)를 수학과 콕(Coq)이라는 증명 보조도구를 사용해 잡아내는가하면, Java의 병렬 메모리 모델(Parallel memory model)이 가지고 있는 문제점을 고쳐 병렬 개발에 대한 이해 방식을 개선하는데에 도움을 주기도 했다.</p>\n<p>안타까운 사실은 한국어로 수학과 논리학을, 특히 강한 자료형을 사용하는 프로그래머에게 필요한 수학과 논리학을 배우는게 쉬운 일이 아니라는 점이다. 무엇보다 한국어로 된 자료의 절대 수가 부족한 환경이 제일의 문제이다. 더불어, 그나마 있는 자료들도 질이 떨어지거나 업데이트가 이루어지지 않는 등 자잘한 문제들이 있는 경우가 태반이니 배우려는 내용 자체의 난이도와 별개로 배우는 과정이 편할리가 만무하다.</p>\n<p>이 글은 이러한 현실을 조금이라도 개선하고자하는 의지를 담아 쓰였다. 앞으로 이어지는 글들도 같은 정신을 이어 쓰려고 생각하고 있다. 이 글을 통해, 그리고 이 글을 읽은 독자 여러분이 앞으로 써 나아갈 글과 말을 통해 한국어로 수학과 논리학을 배우는 것이 좀 더 쉬워지기를 바라며 서두를 마치도록 하겠다.</p>\n<h1 id=\"헷갈리기-쉬운-것-구분하기-사용과-언급\" style=\"position:relative;\"><a href=\"#%ED%97%B7%EA%B0%88%EB%A6%AC%EA%B8%B0-%EC%89%AC%EC%9A%B4-%EA%B2%83-%EA%B5%AC%EB%B6%84%ED%95%98%EA%B8%B0-%EC%82%AC%EC%9A%A9%EA%B3%BC-%EC%96%B8%EA%B8%89\" aria-label=\"헷갈리기 쉬운 것 구분하기 사용과 언급 permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>헷갈리기 쉬운 것 구분하기: 사용과 언급</h1>\n<p>단어의 사용(Use)과 단어의 언급(Mention)은 굉장히 자주 헷갈리는 개념 중 하나지만, 논리학을 할 때에는 반드시 구분해야하는 개념이다. 이 장부터 시작하여 이 글과 이 글에 이어지는 글들에서는 모두 단어의 사용과 언급을 구분할 것이기 때문에, 이 둘이 어떻게 다른지, 그리고 왜 구분해야되는지에 대해서 이 장에서 충분히 설명하고 넘어가고자 한다.</p>\n<p>우선 어떤 단어를 사용하는 경우의 예시를 보자.</p>\n<ul>\n<li>자연은 아름답다.</li>\n<li>1과 1을 더하면 2이다.</li>\n<li>적분은 어렵다.</li>\n</ul>\n<p>이어서, 어떤 단어를 언급하는 경우의 예시를 보자. 보통 언급된 단어는 작은 따옴표(')로 둘러싸 표시한다.</p>\n<ul>\n<li>'아름답다'는 네 글자로 이루어져 있다.</li>\n<li>'1'과 '1', '+'에 '='를 합치면 창문이 된다.</li>\n<li>'자연'은 두 음절로 읽힌다.</li>\n</ul>\n<p>어떤 독자들은 대략적으로 어떤 차이인지 이해했을 것이다. 좀 더 분명히 설명해보면 사용된 단어는 그 뜻을 말하기 위해 사용하는 것이고, 언급된 단어는 그 단어 자체를 말하기 위해서 사용된 것이다. 다시 예를 들어</p>\n<ul>\n<li>그 책은 200 장의 종이로 만들어졌다.</li>\n</ul>\n<p>는 책이라는 종이 위에 글씨가 쓰여진 물체 중 하나의 구성이 어떻게 되어있는지 설명하고 있기 때문에 평범하게 말이 되는 문장이지만</p>\n<ul>\n<li>'그 책'은 200 장의 종이로 만들어졌다.</li>\n</ul>\n<p>는 '그 책'이라는 단어들이 200 장의 종이로 만들어졌다는 걸 의미하고, 단어들은 종이로 만들어진 것이 아니므로 이상한 문장이 된다. 다시</p>\n<ul>\n<li>그 책은 두 단어로 되어있다.</li>\n</ul>\n<p>는 단어가 두 개밖에 안 쓰여져 있는 무언가 이상한 책에 대한 이야기를 하는 문장이지만</p>\n<ul>\n<li>'그 책'은 두 단어로 되어있다.</li>\n</ul>\n<p>는 평범하게 '그 책'이라는 단어들이 단어 두 개로 구성되어있다는 이야기이니, 자명하게 참이다.</p>\n<iframe src=\"/iframe/predicate-logic?content=A%20%7C%20B%0AC%20%7C%20D%0AQ%20%5C/%202%20%7C%203\" />","id":"7e11f939-5a95-59d8-a397-03e9dbf7e1cf","postPath":"/ko/post/logic-for-programmers-000/","parent":{"__typename":"File","date":"2 days ago"}}},"pageContext":{"id":"7e11f939-5a95-59d8-a397-03e9dbf7e1cf"}}}