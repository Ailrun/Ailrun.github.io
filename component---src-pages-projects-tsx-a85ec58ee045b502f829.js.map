{"version":3,"sources":["webpack:///./node_modules/core-js/modules/_string-html.js","webpack:///./src/pages/projects.tsx","webpack:///./.cache/gatsby-browser-entry.js","webpack:///./src/components/NavigationBar.tsx","webpack:///./.cache/public-page-renderer.js","webpack:///./.cache/public-page-renderer-prod.js","webpack:///./src/components/SEO.tsx","webpack:///./src/components/Layout.tsx","webpack:///./node_modules/core-js/modules/es6.string.link.js"],"names":["$export","fails","defined","quot","createHTML","string","tag","attribute","value","S","String","p1","replace","module","exports","NAME","exec","O","P","F","test","toLowerCase","split","length","ProjectsPage","data","className","Title","ProjectSections","projectSections","json","src","map","projectSection","i","ProjectSection","key","title","projects","project","Project","href","link","images","image","loader","enqueue","React","createContext","NavigationBar","to","text","NavigationBarItem","m","require","default","ProdPageRenderer","location","pageResources","createElement","InternalPageRenderer","SEO","site","siteMetadata","name","content","description","url","rel","author","property","locales","locale","index","Layout","children","this"],"mappings":"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","file":"component---src-pages-projects-tsx-a85ec58ee045b502f829.js","sourcesContent":["var $export = require('./_export');\nvar fails = require('./_fails');\nvar defined = require('./_defined');\nvar quot = /\"/g;\n// B.2.3.2.1 CreateHTML(string, tag, attribute, value)\nvar createHTML = function (string, tag, attribute, value) {\n  var S = String(defined(string));\n  var p1 = '<' + tag;\n  if (attribute !== '') p1 += ' ' + attribute + '=\"' + String(value).replace(quot, '&quot;') + '\"';\n  return p1 + '>' + S + '</' + tag + '>';\n};\nmodule.exports = function (NAME, exec) {\n  var O = {};\n  O[NAME] = exec(createHTML);\n  $export($export.P + $export.F * fails(function () {\n    var test = ''[NAME]('\"');\n    return test !== test.toLowerCase() || test.split('\"').length > 3;\n  }), 'String', O);\n};\n","import { graphql, useStaticQuery } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport Layout from '../components/Layout';\nimport NavigationBar from '../components/NavigationBar';\n\nconst ProjectsPage: React.FC<unknown> = () => {\n  const data = useStaticQuery<any>(query);\n\n  return (\n    <Layout>\n      <NavigationBar />\n      <section className='ailrun-blog-projects-page'>\n        <Title />\n        <ProjectSections projectSections={data.json.projectSections} />\n      </section>\n    </Layout>\n  );\n};\nexport default ProjectsPage;\n\nconst query = graphql`\n  query {\n    json: projectsJson {\n      projectSections {\n        title\n        projects {\n          images\n          link\n          title\n        }\n      }\n    }\n  }\n`;\n\nconst Title: React.FC<unknown> = () => {\n  return (\n    <section className='ailrun-blog-page-title'>\n      <img src='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/project.png' />\n      <header>\n        <h1>Projects</h1>\n      </header>\n    </section>\n  );\n};\n\nconst ProjectSections: React.FC<any> = ({ projectSections }) => {\n  return (\n    <section className='ailrun-blog-page-main'>\n      {\n        projectSections.map((projectSection: any, i: number) => (\n          <ProjectSection key={i} {...{ projectSection }} />\n        ))\n      }\n    </section>\n  );\n};\n\nconst ProjectSection: React.FC<any> = ({ projectSection }) => {\n  return (\n    <div>\n      <h2>{projectSection.title}</h2>\n      <hr />\n      <ul>\n      {\n        projectSection.projects.map((project: any, i: number) => (\n          <Fragment key={i}>\n            { i !== 0 ? <hr /> : null }\n            <Project {...{ project }} />\n          </Fragment>\n        ))\n      }\n      </ul>\n    </div>\n  );\n};\n\nconst Project: React.FC<any> = ({ project }) => {\n  return (\n    <li>\n      <article>\n        <p>\n          <span>-</span>\n          <a href={project.link}>{project.title}</a>\n        </p>\n        <div>\n          {\n            project.images.map((image: string) => (\n              <img key={image} src={image} />\n            ))\n          }\n        </div>\n      </article>\n    </li>\n  );\n};\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\nimport Link, {\n  withPrefix,\n  withAssetPrefix,\n  navigate,\n  push,\n  replace,\n  navigateTo,\n  parsePath,\n} from \"gatsby-link\"\nimport PageRenderer from \"./public-page-renderer\"\nimport loader from \"./loader\"\n\nconst prefetchPathname = loader.enqueue\n\nconst StaticQueryContext = React.createContext({})\n\nfunction StaticQueryDataRenderer({ staticQueryData, data, query, render }) {\n  const finalData = data\n    ? data.data\n    : staticQueryData[query] && staticQueryData[query].data\n\n  return (\n    <React.Fragment>\n      {finalData && render(finalData)}\n      {!finalData && <div>Loading (StaticQuery)</div>}\n    </React.Fragment>\n  )\n}\n\nconst StaticQuery = props => {\n  const { data, query, render, children } = props\n\n  return (\n    <StaticQueryContext.Consumer>\n      {staticQueryData => (\n        <StaticQueryDataRenderer\n          data={data}\n          query={query}\n          render={render || children}\n          staticQueryData={staticQueryData}\n        />\n      )}\n    </StaticQueryContext.Consumer>\n  )\n}\n\nconst useStaticQuery = query => {\n  if (\n    typeof React.useContext !== `function` &&\n    process.env.NODE_ENV === `development`\n  ) {\n    throw new Error(\n      `You're likely using a version of React that doesn't support Hooks\\n` +\n        `Please update React and ReactDOM to 16.8.0 or later to use the useStaticQuery hook.`\n    )\n  }\n  const context = React.useContext(StaticQueryContext)\n  if (context[query] && context[query].data) {\n    return context[query].data\n  } else {\n    throw new Error(\n      `The result of this StaticQuery could not be fetched.\\n\\n` +\n        `This is likely a bug in Gatsby and if refreshing the page does not fix it, ` +\n        `please open an issue in https://github.com/gatsbyjs/gatsby/issues`\n    )\n  }\n}\n\nStaticQuery.propTypes = {\n  data: PropTypes.object,\n  query: PropTypes.string.isRequired,\n  render: PropTypes.func,\n  children: PropTypes.func,\n}\n\nfunction graphql() {\n  throw new Error(\n    `It appears like Gatsby is misconfigured. Gatsby related \\`graphql\\` calls ` +\n      `are supposed to only be evaluated at compile time, and then compiled away. ` +\n      `Unfortunately, something went wrong and the query was left in the compiled code.\\n\\n` +\n      `Unless your site has a complex or custom babel/Gatsby configuration this is likely a bug in Gatsby.`\n  )\n}\n\nexport {\n  Link,\n  withAssetPrefix,\n  withPrefix,\n  graphql,\n  parsePath,\n  navigate,\n  push, // TODO replace for v3\n  replace, // TODO remove replace for v3\n  navigateTo, // TODO: remove navigateTo for v3\n  StaticQueryContext,\n  StaticQuery,\n  PageRenderer,\n  useStaticQuery,\n  prefetchPathname,\n}\n","import { Link } from 'gatsby';\nimport React from 'react';\n\nconst NavigationBar: React.FC<unknown> = () => {\n  return (\n    <header className='ailrun-blog-navigation-bar'>\n      <h1>\n        <Link to='/'>\n          Valhala of Valkyrie\n        </Link>\n      </h1>\n      <ul>\n        <NavigationBarItem to='/' text='Main' />\n        <NavigationBarItem to='/projects' text='Projects' />\n        <NavigationBarItem to='/about' text='About' />\n      </ul>\n    </header>\n  );\n};\nexport default NavigationBar;\n\ninterface ItemProps {\n  to: string;\n  text: string;\n}\n\nconst NavigationBarItem: React.FC<ItemProps> = ({ to, text }) => {\n  return (\n    <li>\n      <Link to={to}>\n        {text}\n      </Link>\n    </li>\n  );\n}\n","const preferDefault = m => (m && m.default) || m\n\nif (process.env.BUILD_STAGE === `develop`) {\n  module.exports = preferDefault(require(`./public-page-renderer-dev`))\n} else if (process.env.BUILD_STAGE === `build-javascript`) {\n  module.exports = preferDefault(require(`./public-page-renderer-prod`))\n} else {\n  module.exports = () => null\n}\n","import React from \"react\"\nimport PropTypes from \"prop-types\"\n\nimport InternalPageRenderer from \"./page-renderer\"\n\nconst ProdPageRenderer = ({ location, pageResources }) => {\n  if (!pageResources) {\n    return null\n  }\n  return React.createElement(InternalPageRenderer, {\n    location,\n    pageResources,\n    ...pageResources.json,\n  })\n}\n\nProdPageRenderer.propTypes = {\n  location: PropTypes.shape({\n    pathname: PropTypes.string.isRequired,\n  }).isRequired,\n}\n\nexport default ProdPageRenderer\n","import { graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\nimport { Helmet } from 'react-helmet-async';\n\nconst SEO: React.FC<unknown> = () => {\n  const data = useStaticQuery<any>(query);\n\n  return (\n    <Helmet>\n      <title>{data.site.siteMetadata.title}</title>\n      <meta name='description' content={data.site.siteMetadata.description} />\n      <meta name='url' content={data.site.siteMetadata.url} />\n      <base href='/' />\n      <link rel='author' href={data.site.siteMetadata.author} />\n      <link rel='index' href={data.site.siteMetadata.url} />\n\n      <meta property='og:type' content='website' />\n      <meta property='og:title' content={data.site.siteMetadata.title} />\n      <meta property='og:description' content={data.site.siteMetadata.description} />\n      <meta property='og:url' content={data.site.siteMetadata.url} />\n      <meta property='og:image' content={data.site.siteMetadata.image} />\n      {\n        data.site.siteMetadata.locales.map((locale: string, index: number) => {\n          if (index === 0) {\n            return (\n              <meta key={'locale' + index} property='og:locale' content={locale} />\n            );\n          } else {\n            return (\n              <meta key={'locale' + index} property='og:locale:alternate' content={locale} />\n            );\n          }\n        })\n      }\n      <meta property='og:site_name' content={data.site.siteMetadata.title} />\n\n      <meta name='twitter:card' content='summary' />\n      <meta name='twitter:title' content={data.site.siteMetadata.title} />\n      <meta name='twitter:description' content={data.site.siteMetadata.description} />\n      <meta name='twitter:image' content={data.site.siteMetadata.image} />\n    </Helmet>\n  );\n};\nexport default SEO;\n\nconst query = graphql`\n  query {\n    site {\n      siteMetadata {\n        title\n        description\n        url\n        image\n        author\n        locales\n      }\n    }\n  }\n`;\n","import React from 'react';\n\nimport SEO from './SEO';\n\nconst Layout: React.FC<unknown> = ({ children }) => {\n  return (\n    <>\n      <SEO />\n      {children}\n    </>\n  );\n};\nexport default Layout;\n","'use strict';\n// B.2.3.10 String.prototype.link(url)\nrequire('./_string-html')('link', function (createHTML) {\n  return function link(url) {\n    return createHTML(this, 'a', 'href', url);\n  };\n});\n"],"sourceRoot":""}