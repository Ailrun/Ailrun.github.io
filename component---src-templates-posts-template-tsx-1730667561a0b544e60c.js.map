{"version":3,"sources":["webpack:///./src/components/PostList.tsx","webpack:///./src/templates/PostsTemplate.tsx","webpack:///./src/components/PageTitle.tsx"],"names":["PostList","posts","PostListRoot","map","post","key","id","Post","PostRoot","PostLink","to","postPath","PostTitle","title","FlexSpacer","PostDate","date","PostExcerpt","dangerouslySetInnerHTML","__html","excerpt","Link","marginBottom","fontSize","C","color","marginLeft","width","display","PostsTemplate","data","location","refineData","Layout","NavigationBar","language","locationToLanguage","PageTitle","backgroundSrc","PostListWrapper","query","md","frontmatter","parent","dateForSort","sort","post0","post1","Date","parse","Root","TitleText","backgroundImage","paddingLeft","fontWeight"],"mappings":"+NAsBeA,EAXmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAH,OAChC,YAACC,EAAD,KAEID,EAAME,KAAI,SAACC,GAAD,OACR,YAAC,WAAD,CAAUC,IAAKD,EAAKE,IAClB,YAAC,EAAS,CAAEF,eAgBhBF,EAAe,4FASfK,EAA4B,SAAC,GAAD,IAAGH,EAAH,EAAGA,KAAH,OAChC,YAACI,EAAD,KACE,YAACC,EAAD,CAAUC,GAAIN,EAAKO,UACjB,YAACC,EAAD,KAAYR,EAAKS,OACjB,YAACC,EAAA,EAAD,MACA,YAACC,EAAD,KAAWX,EAAKY,MAChB,YAACC,EAAD,CACEC,wBAAyB,CAAEC,OAAQf,EAAKgB,cAM1CZ,EAAW,oGAQXC,EAAW,YAAOY,OAAP,2GASXT,EAAY,sCAAU,CAC1BU,aAAc,QAEdC,SAAUC,IACVC,MAAOD,MAGHT,EAAW,wCAAY,CAC3BQ,SAAUC,IACVC,MAAOD,MAGHP,EAAc,wCAAY,CAC9BS,WAAY,MAEZC,MAAO,mBAEPJ,SAAUC,IACVC,MAAOD,IAEP,IAAK,CACHI,QAAS,UAGX,yBAA0B,CACxBA,QAAS,U,kDCnEEC,UAhBwB,SAAC,GAAuB,IAArBC,EAAqB,EAArBA,KAAMC,EAAe,EAAfA,SACxC9B,EAAQ+B,EAAWF,GAEzB,OACE,YAACG,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,CAAeC,SAAUC,YAAmBL,KAC5C,YAACM,EAAA,EAAD,CACEC,cAAc,0EACdzB,MAAM,UAER,YAAC0B,EAAD,KACE,YAAC,EAAD,CAAUtC,MAAOA,OAXzB,IAoCauC,EAAQ,aAwBfR,EAAa,SAACF,GAClB,OAAOA,EAAKW,GAAGxC,MACZE,KAAI,SAACC,GAAD,cAAW,CACdE,GAAIF,EAAKE,GACTO,MAAOT,EAAKsC,YAAY7B,MACxBG,KAAI,UAAEZ,EAAKsC,YAAY1B,YAAnB,QAA2BZ,EAAKuC,OAAO3B,KAC3C4B,YAAW,UAAExC,EAAKsC,YAAYE,mBAAnB,QAAkCxC,EAAKuC,OAAOC,YACzDxB,QAAShB,EAAKgB,QACdT,SAAUP,EAAKO,aAEhBkC,MAAK,SAACC,EAAOC,GAAR,OAAkBC,KAAKC,MAAMF,EAAMH,aAAeI,KAAKC,MAAMH,EAAMF,gBACxEzC,KAAI,SAACC,GAAD,MAAW,CACdE,GAAIF,EAAKE,GACTO,MAAOT,EAAKS,MACZG,KAAMZ,EAAKY,KACXI,QAAShB,EAAKgB,QACdT,SAAUP,EAAKO,cAIf4B,EAAkB,8H,sFC/ETF,IALoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAezB,EAAlB,EAAkBA,MAAlB,OACjC,YAACqC,EAAD,CAAMZ,cAAeA,GACnB,YAACa,EAAD,KAAYtC,KAQhB,IAAMqC,EAAO,8KAWV,kBAAwB,CACzBE,gBAAiB,QADhB,EAAGd,cACW,SAGXa,EAAY,uCAAU,CAC1BE,YAAa,KAEb5B,MAAOD,IACP8B,WAAY,OACZ/B,SAAUC","file":"component---src-templates-posts-template-tsx-1730667561a0b544e60c.js","sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\n\nexport interface Props {\n  readonly posts: PostInfo[];\n}\nconst PostList: React.FC<Props> = ({ posts }) => (\n  <PostListRoot>\n    {\n      posts.map((post) => (\n        <Fragment key={post.id}>\n          <Post {...{ post }} />\n        </Fragment>\n      ))\n    }\n  </PostListRoot>\n);\nexport default PostList;\n\nexport interface PostInfo {\n  readonly id: string;\n  readonly title: string;\n  readonly date: string;\n  readonly excerpt: string;\n  readonly postPath: string;\n}\n\nconst PostListRoot = styled.ul({\n  width: '100%',\n\n  listStyle: 'none',\n});\n\ninterface PostProps {\n  post: PostInfo;\n}\nconst Post: React.FC<PostProps> = ({ post }) => (\n  <PostRoot>\n    <PostLink to={post.postPath}>\n      <PostTitle>{post.title}</PostTitle>\n      <FlexSpacer />\n      <PostDate>{post.date}</PostDate>\n      <PostExcerpt\n        dangerouslySetInnerHTML={{ __html: post.excerpt }}\n      />\n    </PostLink>\n  </PostRoot>\n);\n\nconst PostRoot = styled.li({\n  width: '100%',\n\n  '& + &': {\n    marginTop: '40px',\n  },\n});\n\nconst PostLink = styled(Link)({\n  display: 'flex',\n\n  width: '100%',\n\n  alignItems: 'center',\n  flexWrap: 'wrap',\n});\n\nconst PostTitle = styled.h3({\n  marginBottom: '0.5em',\n\n  fontSize: C.fontLargeSize,\n  color: C.textBlack,\n});\n\nconst PostDate = styled.span({\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n});\n\nconst PostExcerpt = styled.span({\n  marginLeft: '1em',\n\n  width: 'calc(100% - 1em)',\n\n  fontSize: C.fontBaseSize,\n  color: C.textLightBlack,\n\n  '*': {\n    display: 'inline',\n  },\n\n  'h1, h2, h3, h4, h5, h6': {\n    display: 'none',\n  },\n});\n","import styled from '@emotion/styled';\nimport { PageRendererProps, graphql } from 'gatsby';\nimport React from 'react';\n\nimport Layout from '../components/Layout';\nimport NavigationBar from '../components/NavigationBar';\nimport PageTitle from '../components/PageTitle';\nimport PostList, { PostInfo as PostListPostInfo } from '../components/PostList';\nimport { locationToLanguage } from '../languages';\n\ninterface Props extends PageRendererProps {\n  readonly data: Data;\n}\nconst PostsTemplate: React.FC<Props> = ({ data, location }) => {\n  const posts = refineData(data);\n\n  return (\n    <Layout>\n      <NavigationBar language={locationToLanguage(location)} />\n      <PageTitle\n        backgroundSrc='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/post.png'\n        title='Posts'\n      />\n      <PostListWrapper>\n        <PostList posts={posts} />\n      </PostListWrapper>\n    </Layout>\n  );\n};\nexport default PostsTemplate;\n\ninterface Data {\n  readonly md: {\n    readonly posts: {\n      readonly frontmatter: {\n        readonly title: string;\n        readonly date?: string;\n        readonly dateForSort?: string;\n      };\n      readonly id: string;\n      readonly excerpt: string;\n      readonly postPath: string;\n      readonly parent: {\n        readonly date: string;\n        readonly dateForSort: string;\n      };\n    }[];\n  };\n}\nexport const query = graphql`\n  query ($language: String) {\n    md: allMarkdownRemark(filter: {language: {eq: $language}}) {\n      posts: nodes {\n        frontmatter {\n          title\n          date(fromNow: true)\n          dateForSort: date\n        }\n        id\n        excerpt(format: HTML, pruneLength: 100, truncate: true)\n        postPath\n\n        parent {\n          ... on File {\n            date: birthTime(fromNow: true)\n            dateForSort: birthTime\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst refineData = (data: Data): PostListPostInfo[] => {\n  return data.md.posts\n    .map((post) => ({\n      id: post.id,\n      title: post.frontmatter.title,\n      date: post.frontmatter.date ?? post.parent.date,\n      dateForSort: post.frontmatter.dateForSort ?? post.parent.dateForSort,\n      excerpt: post.excerpt,\n      postPath: post.postPath,\n    }))\n    .sort((post0, post1) => Date.parse(post1.dateForSort) - Date.parse(post0.dateForSort))\n    .map((post) => ({\n      id: post.id,\n      title: post.title,\n      date: post.date,\n      excerpt: post.excerpt,\n      postPath: post.postPath,\n    }));\n};\n\nconst PostListWrapper = styled.main({\n  margin: '0 20vw',\n  marginTop: '60px',\n\n  width: '60vw',\n  minHeight: '50vh',\n});\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport * as C from '../styles/constants';\n\nexport interface Props {\n  readonly backgroundSrc: string;\n  readonly title: string;\n}\nconst PageTitle: React.FC<Props> = ({ backgroundSrc, title }) => (\n  <Root backgroundSrc={backgroundSrc}>\n    <TitleText>{title}</TitleText>\n  </Root>\n);\nexport default PageTitle;\n\ninterface RootProps {\n  readonly backgroundSrc: string;\n}\nconst Root = styled.header<RootProps>({\n  display: 'flex',\n\n  width: '100%',\n  height: '24vw',\n\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundColor: 'white',\n\n  alignItems: 'center',\n}, ({ backgroundSrc }) => ({\n  backgroundImage: `url('${backgroundSrc}')`,\n}));\n\nconst TitleText = styled.h1({\n  paddingLeft: '7%',\n\n  color: C.textWhite,\n  fontWeight: 'bold',\n  fontSize: C.fontGiantSize,\n});\n"],"sourceRoot":""}