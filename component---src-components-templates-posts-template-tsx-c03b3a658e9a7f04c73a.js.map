{"version":3,"sources":["webpack:///./src/components/PostList.tsx","webpack:///./src/components/templates/PostsTemplate.tsx","webpack:///./src/components/PageTitle.tsx"],"names":["PostList","postInfos","PostListRoot","map","postInfo","key","id","Post","PostRoot","PostLink","to","postPath","PostTitle","title","FlexSpacer","PostDate","date","PostExcerpt","dangerouslySetInnerHTML","__html","excerpt","Link","marginBottom","fontSize","C","color","marginLeft","width","display","PostsTemplate","posts","usePostInfos","Layout","NavigationBar","PageTitle","backgroundSrc","PostListWrapper","allMarkdownRemark","refineData","frontmatter","parent","dateForSort","sort","post0","post1","Date","parse","Root","TitleText","backgroundImage","paddingLeft","fontWeight"],"mappings":"0RAsBeA,EAXmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAChC,YAACC,EAAD,KAEID,EAAUE,KAAI,SAACC,GAAD,OACZ,YAAC,WAAD,CAAUC,IAAKD,EAASE,IACtB,YAAC,EAAD,CAAMF,SAAUA,UAgBpBF,EAAe,4FASfK,EAA4B,SAAC,GAAD,IAAGH,EAAH,EAAGA,SAAH,OAChC,YAACI,EAAD,KACE,YAACC,EAAD,CAAUC,GAAIN,EAASO,UACrB,YAACC,EAAD,KAAYR,EAASS,OACrB,YAACC,EAAA,EAAD,MACA,YAACC,EAAD,KAAWX,EAASY,MACpB,YAACC,EAAD,CACEC,wBAAyB,CAAEC,OAAQf,EAASgB,cAM9CZ,EAAW,oGAQXC,EAAW,YAAOY,OAAP,2GASXT,EAAY,sCAAU,CAC1BU,aAAc,QAEdC,SAAUC,IACVC,MAAOD,MAGHT,EAAW,wCAAY,CAC3BQ,SAAUC,IACVC,MAAOD,MAGHP,EAAc,wCAAY,CAC9BS,WAAY,MAEZC,MAAO,mBAEPJ,SAAUC,IACVC,MAAOD,IAEP,IAAK,CACHI,QAAS,UAGX,yBAA0B,CACxBA,QAAS,U,sICvEEC,UAhBoC,WACjD,IAAMC,EAAQC,IAEd,OACE,YAACC,EAAA,EAAD,KACE,YAACC,EAAA,EAAD,MACA,YAACC,EAAA,EAAD,CACEC,cAAc,0EACdtB,MAAM,UAER,YAACuB,EAAD,KACE,YAAC,EAAD,CAAUnC,UAAW6B,OAX7B,IA6DMC,EAAe,WAAkB,IAC7BD,EAAU,OAA4BO,kBAAtCP,MAER,OAAOQ,EAAWR,IAGdQ,EAAa,SAACR,GAClB,OAAOA,EACJ3B,KAAI,YAA0C,QAAvCoC,EAAuC,EAAvCA,YAAaC,EAA0B,EAA1BA,OAAWpC,EAAe,8BACvCS,EAAQ0B,EAAY1B,MACpBG,EAAI,UAAGuB,EAAYvB,YAAf,QAAuBwB,EAAOxB,KAClCyB,EAAW,UAAGF,EAAYE,mBAAf,QAA8BD,EAAOC,YAEtD,wBAAYrC,EAAZ,CAAsBS,QAAOG,OAAMyB,mBAEpCC,MAAK,SAACC,EAAOC,GAAR,OAAkBC,KAAKC,MAAMF,EAAMH,aAAeI,KAAKC,MAAMH,EAAMF,gBACxEtC,KAAI,cAAGsC,YAAH,gCAGHL,EAAkB,8H,sFC3ETF,IALoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAetB,EAAlB,EAAkBA,MAAlB,OACjC,YAACkC,EAAD,CAAMZ,cAAeA,GACnB,YAACa,EAAD,KAAYnC,KAQhB,IAAMkC,EAAO,8KAWV,kBAAwB,CACzBE,gBAAiB,QADhB,EAAGd,cACW,SAGXa,EAAY,uCAAU,CAC1BE,YAAa,KAEbzB,MAAOD,IACP2B,WAAY,OACZ5B,SAAUC,O","file":"component---src-components-templates-posts-template-tsx-c03b3a658e9a7f04c73a.js","sourcesContent":["import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\n\nexport interface Props {\n  readonly postInfos: PostInfo[];\n}\nconst PostList: React.FC<Props> = ({ postInfos }) => (\n  <PostListRoot>\n    {\n      postInfos.map((postInfo) => (\n        <Fragment key={postInfo.id}>\n          <Post postInfo={postInfo} />\n        </Fragment>\n      ))\n    }\n  </PostListRoot>\n);\nexport default PostList;\n\nexport interface PostInfo {\n  readonly id: string;\n  readonly title: string;\n  readonly date: string;\n  readonly excerpt: string;\n  readonly postPath: string;\n}\n\nconst PostListRoot = styled.ul({\n  width: '100%',\n\n  listStyle: 'none',\n});\n\ninterface PostProps {\n  postInfo: PostInfo;\n}\nconst Post: React.FC<PostProps> = ({ postInfo }) => (\n  <PostRoot>\n    <PostLink to={postInfo.postPath}>\n      <PostTitle>{postInfo.title}</PostTitle>\n      <FlexSpacer />\n      <PostDate>{postInfo.date}</PostDate>\n      <PostExcerpt\n        dangerouslySetInnerHTML={{ __html: postInfo.excerpt }}\n      />\n    </PostLink>\n  </PostRoot>\n);\n\nconst PostRoot = styled.li({\n  width: '100%',\n\n  '& + &': {\n    marginTop: '40px',\n  },\n});\n\nconst PostLink = styled(Link)({\n  display: 'flex',\n\n  width: '100%',\n\n  alignItems: 'center',\n  flexWrap: 'wrap',\n});\n\nconst PostTitle = styled.h3({\n  marginBottom: '0.5em',\n\n  fontSize: C.fontLargeSize,\n  color: C.textBlack,\n});\n\nconst PostDate = styled.span({\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n});\n\nconst PostExcerpt = styled.span({\n  marginLeft: '1em',\n\n  width: 'calc(100% - 1em)',\n\n  fontSize: C.fontBaseSize,\n  color: C.textLightBlack,\n\n  '*': {\n    display: 'inline',\n  },\n\n  'h1, h2, h3, h4, h5, h6': {\n    display: 'none',\n  },\n});\n","import styled from '@emotion/styled';\nimport { PageRendererProps, graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport Layout from '../Layout';\nimport NavigationBar from '../NavigationBar';\nimport PageTitle from '../PageTitle';\nimport PostList, { PostInfo } from '../PostList';\n\nconst PostsTemplate: React.FC<PageRendererProps> = () => {\n  const posts = usePostInfos();\n\n  return (\n    <Layout>\n      <NavigationBar />\n      <PageTitle\n        backgroundSrc='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/post.png'\n        title='Posts'\n      />\n      <PostListWrapper>\n        <PostList postInfos={posts} />\n      </PostListWrapper>\n    </Layout>\n  );\n};\nexport default PostsTemplate;\n\ninterface Data {\n  readonly allMarkdownRemark: {\n    readonly posts: DataPost[];\n  };\n}\ninterface DataPost {\n  readonly frontmatter: {\n    readonly title: string;\n    readonly date?: string;\n    readonly dateForSort?: string;\n  };\n  readonly id: string;\n  readonly excerpt: string;\n  readonly postPath: string;\n  readonly parent: {\n    readonly date: string;\n    readonly dateForSort: string;\n  };\n} \nconst query = graphql`\n  query ($language: String) {\n    allMarkdownRemark(filter: {language: {eq: $language}}) {\n      posts: nodes {\n        frontmatter {\n          title\n          date(fromNow: true)\n          dateForSort: date\n        }\n        id\n        excerpt(format: HTML, pruneLength: 100, truncate: true)\n        postPath\n\n        parent {\n          ... on File {\n            date: birthTime(fromNow: true)\n            dateForSort: birthTime\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst usePostInfos = (): PostInfo[] => {\n  const { posts } = useStaticQuery<Data>(query).allMarkdownRemark;\n\n  return refineData(posts);\n};\n\nconst refineData = (posts: DataPost[]): PostInfo[] => {\n  return posts\n    .map(({ frontmatter, parent, ...postInfo }) => {\n      const title = frontmatter.title;\n      const date = frontmatter.date ?? parent.date;\n      const dateForSort = frontmatter.dateForSort ?? parent.dateForSort;\n\n      return { ...postInfo, title, date, dateForSort };\n    })\n    .sort((post0, post1) => Date.parse(post1.dateForSort) - Date.parse(post0.dateForSort))\n    .map(({ dateForSort, ...postInfo }) => postInfo);\n};\n\nconst PostListWrapper = styled.main({\n  margin: '0 20vw',\n  marginTop: '60px',\n\n  width: '60vw',\n  minHeight: '50vh',\n});\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport * as C from '../styles/constants';\n\nexport interface Props {\n  readonly backgroundSrc: string;\n  readonly title: string;\n}\nconst PageTitle: React.FC<Props> = ({ backgroundSrc, title }) => (\n  <Root backgroundSrc={backgroundSrc}>\n    <TitleText>{title}</TitleText>\n  </Root>\n);\nexport default PageTitle;\n\ninterface RootProps {\n  readonly backgroundSrc: string;\n}\nconst Root = styled.header<RootProps>({\n  display: 'flex',\n\n  width: '100%',\n  height: '24vw',\n\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundColor: 'white',\n\n  alignItems: 'center',\n}, ({ backgroundSrc }) => ({\n  backgroundImage: `url('${backgroundSrc}')`,\n}));\n\nconst TitleText = styled.h1({\n  paddingLeft: '7%',\n\n  color: C.textWhite,\n  fontWeight: 'bold',\n  fontSize: C.fontGiantSize,\n});\n"],"sourceRoot":""}