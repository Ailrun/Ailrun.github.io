{"version":3,"sources":["webpack:///./src/components/PageTitle.tsx","webpack:///./src/components/PostList.tsx","webpack:///./src/components/pages/posts.tsx","webpack:///./src/pages/ko/posts.tsx"],"names":["PageTitle","backgroundSrc","title","Root","TitleText","backgroundImage","paddingLeft","color","C","fontWeight","fontSize","PostList","postInfos","PostListRoot","map","postInfo","key","postPath","Post","PostRoot","PostLink","to","PostTitle","FlexSpacer","PostDate","date","PostExcerpt","dangerouslySetInnerHTML","__html","excerpt","Link","marginBottom","marginLeft","width","display","PostsPage","data","language","useLanguage","posts","refineData","SEO","description","pathname","NavigationBar","PostListWrapper","targetLanguage","targetGroup","allMarkdownPost","group","find","fieldValue","nodes","sort","post0","post1","Date","parse","dateForSort","parent","replace"],"mappings":"kwBAceA,IALoB,SAAC,GAAD,IAAGC,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,MAAlB,OACjC,YAACC,EAAD,CAAMF,cAAeA,GACnB,YAACG,EAAD,KAAYF,KAQhB,IAAMC,EAAO,8KAWV,kBAAwB,CACzBE,gBAAiB,QADhB,EAAGJ,cACW,SAGXG,EAAY,uCAAU,CAC1BE,YAAa,KAEbC,MAAOC,IACPC,WAAY,OACZC,SAAUF,O,8PCjBGG,EAXmB,SAAC,GAAD,IAAGC,EAAH,EAAGA,UAAH,OAChC,YAACC,EAAD,KAEID,EAAUE,KAAI,SAACC,GAAD,OACZ,YAAC,WAAD,CAAUC,IAAKD,EAASE,UACtB,YAAC,EAAD,CAAMF,SAAUA,UAepBF,EAAe,4FASfK,EAA4B,SAAC,GAAiB,IAAfH,EAAe,EAAfA,SACnC,OACE,YAACI,EAAD,KACE,YAACC,EAAD,CAAUC,GAAIN,EAASE,UACrB,YAACK,EAAD,KAAYP,EAASb,OACrB,YAACqB,EAAA,EAAD,MACA,YAACC,EAAD,KAAWT,EAASU,MACpB,YAACC,EAAD,CACEC,wBAAyB,CAAEC,OAAQb,EAASc,cAOhDV,EAAW,oGAQXC,EAAW,YAAOU,OAAP,2GASXR,EAAY,sCAAU,CAC1BS,aAAc,QAEdrB,SAAUF,IACVD,MAAOC,MAGHgB,EAAW,wCAAY,CAC3Bd,SAAUF,IACVD,MAAOC,MAOHkB,EAAc,uCAAW,CAC7BM,WAAY,MAEZC,MAAO,mBAEPvB,SAAUF,IACVD,MAAOC,IAEP,IAAK,CACH0B,QAAS,UAGX,yBAA0B,CACxBA,QAAS,U,YC1Fb,IAwBeC,EAxBgC,WAC7C,IAAMC,EAAO,OACPC,EAAWC,cAEXC,EAAQC,EAAWJ,EAAMC,GAE/B,OACE,8BACE,YAACI,EAAA,EAAD,CACEvC,MAAM,QACNwC,YAAY,uBACZC,SAAQ,IAAMN,EAAN,WAEV,YAACO,EAAA,EAAD,MACA,YAAC5C,EAAA,EAAD,CACEC,cAAc,0EACdC,MAAM,UAER,YAAC2C,EAAD,KACE,YAAC,EAAD,CAAUjC,UAAW2B,OA8CvBC,EAAa,SAACJ,EAAYU,GAAyC,MACjEC,EACJX,EAAKY,gBAAgBC,MAClBC,MAAK,qBAAGC,aAAgCL,KAE7C,OAAO,UAACC,aAAD,EAACA,EAAaK,aAAd,QAAuB,IAC3BC,MAAK,SAACC,EAAOC,GAAR,OAAkBC,KAAKC,MAAMF,EAAMG,aAAeF,KAAKC,MAAMH,EAAMI,gBACxE5C,KAAI,cAAG4C,YAAH,EAAgBrB,SAAhB,IAA0BsB,EAA1B,EAA0BA,OAAW5C,E,oIAArC,gEACAA,EADA,CAGHc,QAAS8B,EAAO9B,QACb+B,QAAQ,OAAQ,OAChBA,QAAQ,OAAQ,OAChBA,QAAQ,SAAU,cAIrBf,EAAkB,6HC3FTV","file":"component---src-pages-ko-posts-tsx-91624540d4516354a43d.js","sourcesContent":["import styled from '@emotion/styled';\nimport React from 'react';\n\nimport * as C from '../styles/constants';\n\nexport interface Props {\n  readonly backgroundSrc: string;\n  readonly title: string;\n}\nconst PageTitle: React.FC<Props> = ({ backgroundSrc, title }) => (\n  <Root backgroundSrc={backgroundSrc}>\n    <TitleText>{title}</TitleText>\n  </Root>\n);\nexport default PageTitle;\n\ninterface RootProps {\n  readonly backgroundSrc: string;\n}\nconst Root = styled.header<RootProps>({\n  display: 'flex',\n\n  width: '100%',\n  height: '24vw',\n\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundColor: 'black',\n\n  alignItems: 'center',\n}, ({ backgroundSrc }) => ({\n  backgroundImage: `url('${backgroundSrc}')`,\n}));\n\nconst TitleText = styled.h1({\n  paddingLeft: '7%',\n\n  color: C.textWhite,\n  fontWeight: 'bold',\n  fontSize: C.fontGiantSize,\n});\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\n\nexport interface Props {\n  readonly postInfos: PostInfo[];\n}\nconst PostList: React.FC<Props> = ({ postInfos }) => (\n  <PostListRoot>\n    {\n      postInfos.map((postInfo) => (\n        <Fragment key={postInfo.postPath}>\n          <Post postInfo={postInfo} />\n        </Fragment>\n      ))\n    }\n  </PostListRoot>\n);\nexport default PostList;\n\nexport interface PostInfo {\n  readonly title: string;\n  readonly date: string;\n  readonly excerpt: string;\n  readonly postPath: string;\n}\n\nconst PostListRoot = styled.ul({\n  width: '100%',\n\n  listStyle: 'none',\n});\n\ninterface PostProps {\n  postInfo: PostInfo;\n}\nconst Post: React.FC<PostProps> = ({ postInfo }) => {\n  return (\n    <PostRoot>\n      <PostLink to={postInfo.postPath}>\n        <PostTitle>{postInfo.title}</PostTitle>\n        <FlexSpacer />\n        <PostDate>{postInfo.date}</PostDate>\n        <PostExcerpt\n          dangerouslySetInnerHTML={{ __html: postInfo.excerpt }}\n        />\n      </PostLink>\n    </PostRoot>\n  );\n};\n\nconst PostRoot = styled.li({\n  width: '100%',\n\n  '& + &': {\n    marginTop: '40px',\n  },\n});\n\nconst PostLink = styled(Link)({\n  display: 'flex',\n\n  width: '100%',\n\n  alignItems: 'center',\n  flexWrap: 'wrap',\n});\n\nconst PostTitle = styled.h3({\n  marginBottom: '0.5em',\n\n  fontSize: C.fontLargeSize,\n  color: C.textBlack,\n});\n\nconst PostDate = styled.span({\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n});\n\n/**\n * This component should use `div` or similar to display\n * inner `p`, `h1`, etc.\n */\nconst PostExcerpt = styled.div({\n  marginLeft: '1em',\n\n  width: 'calc(100% - 1em)',\n\n  fontSize: C.fontBaseSize,\n  color: C.textLightBlack,\n\n  '*': {\n    display: 'inline',\n  },\n\n  'h1, h2, h3, h4, h5, h6': {\n    display: 'none',\n  },\n});\n","import styled from '@emotion/styled';\nimport { PageRendererProps, graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../../hooks/useLanguage';\nimport { Language } from '../../utils/languages';\nimport NavigationBar from '../NavigationBar';\nimport PageTitle from '../PageTitle';\nimport PostList, { PostInfo } from '../PostList';\nimport SEO from '../SEO';\n\nconst PostsPage: React.FC<PageRendererProps> = () => {\n  const data = useStaticQuery<Data>(query);\n  const language = useLanguage();\n\n  const posts = refineData(data, language);\n\n  return (\n    <>\n      <SEO\n        title='Posts'\n        description='List of Posts in VoV'\n        pathname={`/${language}/posts`}\n      />\n      <NavigationBar />\n      <PageTitle\n        backgroundSrc='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/post.png'\n        title='Posts'\n      />\n      <PostListWrapper>\n        <PostList postInfos={posts} />\n      </PostListWrapper>\n    </>\n  );\n};\nexport default PostsPage;\n\ninterface Data {\n  readonly allMarkdownPost: {\n    readonly group: {\n      readonly fieldValue: Language;\n      readonly nodes: DataMarkdownPost[];\n    }[];\n  };\n}\ninterface DataMarkdownPost {\n  readonly title: string;\n  readonly date: string;\n  readonly dateForSort: string;\n  readonly postPath: string;\n  readonly language: string;\n  readonly parent: {\n    readonly excerpt: string;\n  };\n} \nconst query = graphql`\n  query {\n    allMarkdownPost {\n      group(field: language) {\n        fieldValue\n        nodes {\n          title\n          date(fromNow: true)\n          dateForSort: date\n          postPath\n          parent {\n            ... on MarkdownRemark {\n              excerpt(format: HTML, pruneLength: 100, truncate: true)\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst refineData = (data: Data, targetLanguage: Language): PostInfo[] => {\n  const targetGroup =\n    data.allMarkdownPost.group\n      .find(({ fieldValue }) => fieldValue === targetLanguage);\n\n  return (targetGroup?.nodes ?? [])\n    .sort((post0, post1) => Date.parse(post1.dateForSort) - Date.parse(post0.dateForSort))\n    .map(({ dateForSort, language, parent, ...postInfo }) => ({\n      ...postInfo,\n      /* Try to make the excerpt WAI compatible */\n      excerpt: parent.excerpt\n        .replace(/<a>/g, '<p>')\n        .replace(/<a /g, '<p ')\n        .replace(/<\\/a>/g, '</p>'),\n    }));\n};\n\nconst PostListWrapper = styled.main({\n  margin: '0 20vw',\n  marginTop: '60px',\n\n  width: '60vw',\n  minHeight: '50vh',\n});\n","import PostsPage from '../../components/pages/posts';\n\nexport default PostsPage;\n"],"sourceRoot":""}