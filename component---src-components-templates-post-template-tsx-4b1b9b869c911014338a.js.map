{"version":3,"sources":["webpack:///./src/hooks/useOnLine.ts","webpack:///./src/utils/typeHelpers.ts","webpack:///./src/components/disqus/DiscussionEmbed.tsx","webpack:///./src/components/Post.tsx","webpack:///./src/components/templates/PostTemplate.tsx"],"names":["useOnLine","useState","navigator","onLine","isOnline","setIsOnline","useEffect","toOnline","toOffline","window","addEventListener","removeEventListener","assert","value","TypeError","DiscussionEmbed","shortname","url","identifier","title","onNewComment","disqusThreadRef","useRef","viewed","setViewed","current","lastDisqusThread","isDisqusThreadInScreen","disqusThreadBoundingRect","getBoundingClientRect","innerHeight","top","handleScroll","disqus_config","this","page","callbacks","disqus_shortname","script","document","createElement","async","src","body","appendChild","removeChild","DISQUS","reset","undefined","hasChildNodes","firstChild","ref","id","Post","gatsbyShortname","postInfo","PostRoot","PostHeader","PostTitle","FlexSpacer","PostDate","date","PostSeparator","PostMain","dangerouslySetInnerHTML","__html","html","PostDisqusSeparator","postPath","margin","width","paddingTop","C","overflowY","fontSize","color","marginRight","PostDisqus","PostDisqusLoadError","PostDisqusLoadErrorWrapper","display","marginTop","marginBottom","textAlign","PostTemplate","data","language","useLanguage","post","refineData","SEO","description","markdownPost","parent","excerpt","pathname","og","type","additional","author","published_time","section","NavigationBar","PostWrapper","process","query"],"mappings":"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","file":"component---src-components-templates-post-template-tsx-4b1b9b869c911014338a.js","sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useOnLine = (): boolean => {\n  const [isOnline, setIsOnline] = useState(() => {\n    if (typeof navigator === 'undefined') {\n      return false;\n    }\n\n    return navigator.onLine;\n  });\n\n  useEffect(() => {\n    function toOnline(): void {\n      setIsOnline(true);\n    }\n\n    function toOffline(): void {\n      setIsOnline(false);\n    }\n\n    window.addEventListener('online', toOnline);\n    window.addEventListener('offline', toOffline);\n\n    return (): void => {\n      window.removeEventListener('online', toOnline);\n      window.removeEventListener('offline', toOffline);\n    };\n  }, []);\n\n  return isOnline;\n};\nexport default useOnLine;\n","export const assert: (value: unknown) => asserts value = (value) => {\n  if (!value) {\n    /* eslint-disable-next-line @typescript-eslint/restrict-template-expressions */\n    throw TypeError(`Assertion failed: ${value} is not true`);\n  }\n};\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { assert } from '../../utils/typeHelpers';\n\nexport interface Props {\n  readonly shortname: string;\n  readonly url: string;\n  readonly identifier: string;\n  readonly title: string;\n  onNewComment?(comment: { readonly id: string; readonly text: string }): void;\n}\nconst DiscussionEmbed: React.FC<Props> = ({ shortname, url, identifier, title, onNewComment }) => {\n  const disqusThreadRef = useRef<HTMLDivElement>(null);\n  const [viewed, setViewed] = useState(false);\n\n  useEffect(() => {\n    if (!('onscroll' in window)) {\n      /*\n       * If scroll event is not supported,\n       * just pretend this discussion has been viewed\n       */\n      return setViewed(true);\n    }\n\n    assert(disqusThreadRef.current);\n    const lastDisqusThread = disqusThreadRef.current;\n\n    function isDisqusThreadInScreen(): boolean {\n      const disqusThreadBoundingRect = lastDisqusThread.getBoundingClientRect();\n\n      return window.innerHeight * 2 > disqusThreadBoundingRect.top;\n    }\n\n    function handleScroll(): void {\n      if (isDisqusThreadInScreen()) {\n        window.removeEventListener('scroll', handleScroll);\n\n        setViewed(true);\n      }\n    }\n\n    if (isDisqusThreadInScreen()) {\n      return setViewed(true);\n    }\n\n    window.addEventListener('scroll', handleScroll);\n\n    return (): void => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!viewed) {\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-explicit-any */\n    (window as any).disqus_config = function (this: any): void {\n      /* eslint-disable react/no-this-in-sfc */\n      this.page.url = url;\n      this.page.identifier = identifier;\n      this.page.title = title;\n\n      this.callbacks.onNewComment =\n        typeof onNewComment !== 'undefined' ?\n          [onNewComment] :\n          [];\n      /* eslint-enable react/no-this-in-sfc */\n    };\n    (window as any).disqus_shortname = shortname;\n\n    const script = window.document.createElement('script');\n    script.async = true;\n    script.src = `https://${shortname}.disqus.com/embed.js`;\n\n    window.document.body.appendChild(script);\n\n    assert(disqusThreadRef.current);\n    const lastDisqusThread = disqusThreadRef.current;\n\n    return (): void => {\n      window.document.body.removeChild(script);\n      (window as any).DISQUS?.reset({});\n\n      try {\n        delete (window as any).DISQUS;\n      } catch {\n        (window as any).DISQUS = undefined;\n      }\n\n      while (lastDisqusThread.hasChildNodes()) {\n        assert(lastDisqusThread.firstChild);\n        lastDisqusThread.removeChild(lastDisqusThread.firstChild);\n      }\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any */\n  }, [viewed, shortname, url, identifier, title, onNewComment]);\n\n  return (\n    <div ref={disqusThreadRef} id='disqus_thread' />\n  );\n};\nexport default DiscussionEmbed;\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport useOnLine from '../hooks/useOnLine';\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\nimport DiscussionEmbed, { Props as DiscussionEmbedProps } from './disqus/DiscussionEmbed';\n\ninterface Props {\n  readonly gatsbyShortname: string;\n  readonly postInfo: PostInfo;\n}\nconst Post: React.FC<Props> = ({ gatsbyShortname, postInfo }) => {\n  return (\n    <PostRoot>\n      <PostHeader>\n        <PostTitle>{postInfo.title}</PostTitle>\n        <FlexSpacer />\n        <PostDate>{postInfo.date}</PostDate>\n      </PostHeader>\n      <PostSeparator />\n      <PostMain\n        dangerouslySetInnerHTML={{ __html: postInfo.html }}\n      />\n      <PostDisqusSeparator />\n      <PostDisqus\n        shortname={gatsbyShortname}\n        url={`https://ailrun.github.io${postInfo.postPath}`}\n        identifier={postInfo.postPath}\n        title={postInfo.title}\n      />\n    </PostRoot>\n  );\n};\nexport default Post;\n\nexport interface PostInfo {\n  readonly title: string;\n  readonly date: string;\n  readonly html: string;\n  readonly postPath: string;\n}\n\nconst PostRoot = styled.article({\n  margin: '0 auto',\n\n  width: '50em',\n\n  paddingTop: C.navigationBarHeight,\n\n  overflowY: 'hidden',\n\n  [C.mediaQueries[0]]: {\n    width: '90%',\n  },\n});\n\nconst PostHeader = styled.header({\n  display: 'flex',\n\n  width: '100%',\n  paddingTop: '1em',\n\n  alignItems: 'center',\n});\n\nconst PostTitle = styled.h1({\n  fontSize: C.fontHugeSize,\n  color: C.textBlack,\n});\n\nconst PostDate = styled.span({\n  marginRight: '1em',\n\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n});\n\nconst PostSeparator = styled.hr({\n  margin: '1em 0',\n\n  color: C.textLightBlack,\n});\n\nconst PostMain = styled.main(\n  {\n    marginBottom: '3em',\n  },\n  C.markdown,\n);\n\nconst PostDisqusSeparator = styled.hr({\n  color: C.textLightBlack,\n});\n\nconst PostDisqus: React.FC<DiscussionEmbedProps> = ({ shortname, url, identifier, title, onNewComment }) => {\n  const onLine = useOnLine();\n\n  if (!onLine) {\n    return (\n      <PostDisqusLoadError />\n    );\n  }\n\n  return (\n    <DiscussionEmbed {...{ shortname, url, identifier, title, onNewComment }} />\n  );\n};\n\nconst PostDisqusLoadError: React.FC<unknown> = () => {\n  return (\n    <PostDisqusLoadErrorWrapper>\n      Unable to Access Network...\n      <br />\n      Cannot Load Disqus Comments\n    </PostDisqusLoadErrorWrapper>\n  );\n};\n\nconst PostDisqusLoadErrorWrapper = styled.p({\n  display: 'block',\n  marginTop: '2em',\n  marginBottom: '4em',\n\n  textAlign: 'center',\n  color: C.textVeryLightBlack,\n  fontSize: C.fontBaseSize,\n});\n","import styled from '@emotion/styled';\nimport { PageRendererProps, graphql } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../../hooks/useLanguage';\nimport NavigationBar from '../NavigationBar';\nimport Post, { PostInfo } from '../Post';\nimport SEO from '../SEO';\n\nexport interface Props extends PageRendererProps {\n  readonly data: Data;\n}\nconst PostTemplate: React.FC<Props> = ({ data }) => {\n  const language = useLanguage();\n  const post = refineData(data);\n\n  return (\n    <>\n      <SEO\n        title={post.title}\n        description={data.markdownPost.parent.excerpt}\n        pathname={post.postPath}\n        og={{\n          type: 'article',\n          additional: {\n            author: `https://ailrun.github.io/${language}/about`,\n            published_time: post.date,\n            section: 'Science',\n          },\n        }}\n      />\n      <NavigationBar />\n      <PostWrapper>\n        <Post\n          gatsbyShortname={process.env.GATSBY_DISQUS_NAME as string}\n          postInfo={post}\n        />\n      </PostWrapper>\n    </>\n  );\n};\nexport default PostTemplate;\n\ninterface Data {\n  readonly markdownPost: DataMarkdownPost;\n}\ninterface DataMarkdownPost {\n  readonly title: string;\n  readonly date: string;\n  readonly postPath: string;\n  readonly parent: {\n    readonly html: string;\n    readonly excerpt: string;\n  };\n}\nexport const query = graphql`\n  query ($id: String) {\n    markdownPost(id: { eq: $id }) {\n      title\n      date(fromNow: true)\n      postPath\n      parent {\n        ... on MarkdownRemark {\n          html\n          excerpt(format: PLAIN, pruneLength: 100, truncate: true)\n        }\n      }\n    }\n  }\n`;\n\nconst refineData = (data: Data): PostInfo => {\n  const { parent, ...postInfo } = data.markdownPost;\n\n  return {\n    ...postInfo,\n    html: parent.html,\n  };\n};\n\nconst PostWrapper = styled.main({\n  width: '100vw',\n  minHeight: '100vh',\n\n  backgroundColor: 'rgba(255, 255, 233, 0.84)',\n});\n"],"sourceRoot":""}