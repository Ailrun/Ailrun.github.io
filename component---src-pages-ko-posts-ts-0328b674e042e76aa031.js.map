{"version":3,"file":"component---src-pages-ko-posts-ts-0328b674e042e76aa031.js","mappings":"qKAcA,IALmC,SAAC,GAAD,IAAGA,EAAH,EAAGA,cAAeC,EAAlB,EAAkBA,MAAlB,OACjCC,EAAAA,EAAAA,IAACC,EAAD,CAAMH,cAAeA,IACnBE,EAAAA,EAAAA,IAACE,EAAD,KAAYH,GAFhB,EAUA,IAAME,GAAOE,EAAAA,EAAAA,GAAAA,SAAAA,CAAAA,OAAAA,aAAAA,GAAAA,EAAAA,CACXC,QAAS,OAETC,MAAO,OACPC,OAAQ,OAERC,mBAAoB,SACpBC,eAAgB,QAChBC,gBAAiB,QAEjBC,WAAY,WAEXC,EAAAA,GAAAA,IAAoB,CACnBL,OAAQ,OAERC,mBAAoB,SAfX,IAiBV,kBAAwB,CACzBK,gBAAgB,QADf,EAAGd,cACW,KAlBJ,OAqBPI,GAAYC,EAAAA,EAAAA,GAAAA,KAAAA,CAAAA,OAAAA,aAAAA,GAAAA,EAAAA,CAChBU,YAAa,KAEbC,MAAOH,EAAAA,GACPI,WAAY,OACZC,SAAUL,EAAAA,KAETA,EAAAA,GAAAA,IAAoB,CACnBK,SAAUL,EAAAA,IARI,M,oLC7BlB,IAWA,EAXkC,SAAC,GAAD,IAAGM,EAAH,EAAGA,UAAH,OAChCjB,EAAAA,EAAAA,IAACkB,EAAD,KAEID,EAAUE,KAAI,SAACC,GAAD,OACZpB,EAAAA,EAAAA,IAACqB,EAAAA,SAAD,CAAUC,IAAKF,EAASG,WACtBvB,EAAAA,EAAAA,IAACwB,EAAD,CAAMJ,SAAUA,IAFpB,IAHN,EAoBMF,GAAef,EAAAA,EAAAA,GAAAA,KAAAA,CAAAA,OAAAA,YAAAA,CAAAA,CAAAA,KAAAA,SAAAA,OAAAA,+BASfqB,EAA4B,SAAC,GAAkB,IAAhBJ,EAAe,EAAfA,SACnC,OACEpB,EAAAA,EAAAA,IAACyB,EAAD,MACEzB,EAAAA,EAAAA,IAAC0B,EAAD,CAAUC,GAAIP,EAASG,WACrBvB,EAAAA,EAAAA,IAAC4B,EAAD,KAAYR,EAASrB,QACrBC,EAAAA,EAAAA,IAAC6B,EAAAA,EAAD,OACA7B,EAAAA,EAAAA,IAAC8B,EAAD,KAAWV,EAASW,OACpB/B,EAAAA,EAAAA,IAACgC,EAAD,CACEC,wBAAyB,CAAEC,OAAQd,EAASe,YARtD,EAeMV,GAAWtB,EAAAA,EAAAA,GAAAA,KAAAA,CAAAA,OAAAA,YAAAA,CAAAA,CAAAA,KAAAA,SAAAA,OAAAA,kCAMXuB,GAAWvB,EAAAA,EAAAA,GAAOiC,EAAAA,KAAP,oBAAAjC,GAAA,GACfC,QAAS,OAETC,MAAO,OAEPK,WAAY,SACZ2B,SAAU,SAET1B,EAAAA,GAAAA,IAAoB,CACnB2B,cAAe,SACf5B,WAAY,cAVC,OAcXkB,GAAYzB,EAAAA,EAAAA,GAAAA,KAAAA,CAAAA,OAAAA,YAAAA,GAAAA,EAAAA,CAChBoC,aAAc,QAEdvB,SAAUL,EAAAA,GACVG,MAAOH,EAAAA,KAENA,EAAAA,GAAAA,IAAoB,CACnB4B,aAAc,EAEdvB,SAAUL,EAAAA,IATI,OAaZmB,GAAW3B,EAAAA,EAAAA,GAAAA,OAAAA,CAAAA,OAAAA,YAAAA,GAAAA,EAAAA,CACfa,SAAUL,EAAAA,GACVG,MAAOH,EAAAA,KAENA,EAAAA,GAAAA,IAAoB,CACnB6B,UAAW,YALE,OAaXR,GAAc7B,EAAAA,EAAAA,GAAAA,MAAAA,CAAAA,OAAAA,YAAAA,GAAAA,EAAAA,CAClBsC,WAAY,MAEZpC,MAAO,mBAEPW,SAAUL,EAAAA,GACVG,MAAOH,EAAAA,GAEP,IAAK,CACHP,QAAS,UAGX,yBAA0B,CACxBA,QAAS,UAGVO,EAAAA,GAAAA,IAAoB,CACnB8B,WAAY,QACZC,YAAa,QACbC,UAAW,QAEX3B,SAAUL,EAAAA,IArBM,O,6CC1FpB,IAwBA,EAxB+C,WAC7C,IAAMiC,GAAOC,EAAAA,EAAAA,gBAAqBC,GAC5BC,GAAWC,EAAAA,EAAAA,KAEXC,EAAQC,EAAWN,EAAMG,GAE/B,OACE/C,EAAAA,EAAAA,IAAAA,EAAAA,SAAAA,MACEA,EAAAA,EAAAA,IAACmD,EAAAA,EAAD,CACEpD,MAAM,QACNqD,YAAY,uBACZC,SAAQ,IAAMN,EAAN,YAEV/C,EAAAA,EAAAA,IAACsD,EAAAA,EAAD,OACAtD,EAAAA,EAAAA,IAACuD,EAAAA,EAAD,CACEzD,cAAc,0EACdC,MAAM,WAERC,EAAAA,EAAAA,IAACwD,EAAD,MACExD,EAAAA,EAAAA,IAACyD,EAAD,CAAUxC,UAAWgC,KAnB7B,EA4CMH,EAAK,aAsBLI,EAAa,SAACN,EAAYc,GAA0C,IAAD,EACjEC,EACJf,EAAKgB,gBAAgBC,MAClBC,MAAK,qBAAGC,aAAgCL,CAD3C,IAGF,OAAO,UAACC,aAAD,EAACA,EAAaK,aAAd,QAAuB,IAC3BC,QAAO,SAACC,GAAD,OAAqDA,EAAKC,KAD7D,IAEJC,MAAK,SAACC,EAAOC,GAAR,OAAkBC,KAAKC,MAAMF,EAAMG,aAAeF,KAAKC,MAAMH,EAAMI,YAFpE,IAGJtD,KAAI,cAAGsD,YAAH,EAAgBN,MAAhB,IAAuBO,EAAvB,EAAuBA,OAAWtD,GAAlC,oCACAA,EADA,CAGHe,QAASuC,EAAOvC,QACbwC,QAAQ,OAAQ,UAChBA,QAAQ,OAAQ,UAChBA,QAAQ,SAAU,YATlB,GALT,EAkBMnB,GAAkBrD,EAAAA,EAAAA,GAAAA,OAAAA,CAAAA,OAAAA,YAAAA,CAAAA,CAAAA,KAAAA,UAAAA,OAAAA,6DC7FxB,G,uBCFe,SAASyE,EAA8BC,EAAQC,GAC5D,GAAc,MAAVD,EAAgB,MAAO,CAAC,EAC5B,IAEIvD,EAAKyD,EAFLC,EAAS,CAAC,EACVC,EAAaC,OAAOC,KAAKN,GAG7B,IAAKE,EAAI,EAAGA,EAAIE,EAAWG,OAAQL,IACjCzD,EAAM2D,EAAWF,GACbD,EAASO,QAAQ/D,IAAQ,IAC7B0D,EAAO1D,GAAOuD,EAAOvD,IAGvB,OAAO0D,CACT,C","sources":["webpack://valhala-of-valkyrie/./src/components/PageTitle.tsx","webpack://valhala-of-valkyrie/./src/components/PostList.tsx","webpack://valhala-of-valkyrie/./src/components/pages/posts.tsx","webpack://valhala-of-valkyrie/./src/pages/ko/posts.ts","webpack://valhala-of-valkyrie/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import styled from '@emotion/styled';\nimport React from 'react';\n\nimport * as C from '../styles/constants';\n\nexport interface Props {\n  readonly backgroundSrc: string;\n  readonly title: string;\n}\nconst PageTitle: React.FC<Props> = ({ backgroundSrc, title }) => (\n  <Root backgroundSrc={backgroundSrc}>\n    <TitleText>{title}</TitleText>\n  </Root>\n);\nexport default PageTitle;\n\ninterface RootProps {\n  readonly backgroundSrc: string;\n}\nconst Root = styled.header<RootProps>({\n  display: 'flex',\n\n  width: '100%',\n  height: '24vw',\n\n  backgroundPosition: 'center',\n  backgroundSize: 'cover',\n  backgroundColor: 'black',\n\n  alignItems: 'center',\n\n  [C.mediaQueries[0]]: {\n    height: '44vw',\n\n    backgroundPosition: 'right',\n  },\n}, ({ backgroundSrc }) => ({\n  backgroundImage: `url('${backgroundSrc}')`,\n}));\n\nconst TitleText = styled.h1({\n  paddingLeft: '7%',\n\n  color: C.textWhite,\n  fontWeight: 'bold',\n  fontSize: C.fontGiantSize,\n\n  [C.mediaQueries[0]]: {\n    fontSize: C.fontHugeSize,\n  },\n});\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React, { Fragment } from 'react';\n\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\n\nexport interface Props {\n  readonly postInfos: PostInfo[];\n}\nconst PostList: React.FC<Props> = ({ postInfos }) => (\n  <PostListRoot>\n    {\n      postInfos.map((postInfo) => (\n        <Fragment key={postInfo.postPath}>\n          <Post postInfo={postInfo} />\n        </Fragment>\n      ))\n    }\n  </PostListRoot>\n);\nexport default PostList;\n\nexport interface PostInfo {\n  readonly title: string;\n  readonly date: string;\n  readonly excerpt: string;\n  readonly postPath: string;\n}\n\nconst PostListRoot = styled.ul({\n  width: '100%',\n\n  listStyle: 'none',\n});\n\ninterface PostProps {\n  postInfo: PostInfo;\n}\nconst Post: React.FC<PostProps> = ({ postInfo }) => {\n  return (\n    <PostRoot>\n      <PostLink to={postInfo.postPath}>\n        <PostTitle>{postInfo.title}</PostTitle>\n        <FlexSpacer />\n        <PostDate>{postInfo.date}</PostDate>\n        <PostExcerpt\n          dangerouslySetInnerHTML={{ __html: postInfo.excerpt }}\n        />\n      </PostLink>\n    </PostRoot>\n  );\n};\n\nconst PostRoot = styled.li({\n  marginBottom: '40px',\n\n  width: '100%',\n});\n\nconst PostLink = styled(Link)({\n  display: 'flex',\n\n  width: '100%',\n\n  alignItems: 'center',\n  flexWrap: 'wrap',\n\n  [C.mediaQueries[0]]: {\n    flexDirection: 'column',\n    alignItems: 'flex-start',\n  },\n});\n\nconst PostTitle = styled.h3({\n  marginBottom: '0.5em',\n\n  fontSize: C.fontLargeSize,\n  color: C.textBlack,\n\n  [C.mediaQueries[0]]: {\n    marginBottom: 0,\n\n    fontSize: C.fontBaseSize,\n  },\n});\n\nconst PostDate = styled.span({\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n\n  [C.mediaQueries[0]]: {\n    alignSelf: 'flex-end',\n  },\n});\n\n/**\n * This component should use `div` or similar to display\n * inner `p`, `h1`, etc.\n */\nconst PostExcerpt = styled.div({\n  marginLeft: '1em',\n\n  width: 'calc(100% - 1em)',\n\n  fontSize: C.fontBaseSize,\n  color: C.textLightBlack,\n\n  '*': {\n    display: 'inline',\n  },\n\n  'h1, h2, h3, h4, h5, h6': {\n    display: 'none',\n  },\n\n  [C.mediaQueries[0]]: {\n    marginLeft: '0.5em',\n    marginRight: '0.5em',\n    marginTop: '0.5em',\n\n    fontSize: C.fontSmallSize,\n  },\n});\n","import styled from '@emotion/styled';\nimport { PageRendererProps, graphql, useStaticQuery } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../../hooks/useLanguage';\nimport type { Language } from '../../utils/languages';\nimport NavigationBar from '../NavigationBar';\nimport PageTitle from '../PageTitle';\nimport PostList, { PostInfo } from '../PostList';\nimport SEO from '../SEO';\n\nconst PostsPage: React.FC<PageRendererProps> = () => {\n  const data = useStaticQuery<Data>(query);\n  const language = useLanguage();\n\n  const posts = refineData(data, language);\n\n  return (\n    <>\n      <SEO\n        title='Posts'\n        description='List of Posts in VoV'\n        pathname={`/${language}/posts`}\n      />\n      <NavigationBar />\n      <PageTitle\n        backgroundSrc='https://raw.githubusercontent.com/Ailrun/media/master/blog-img/post.png'\n        title='Posts'\n      />\n      <PostListWrapper>\n        <PostList postInfos={posts} />\n      </PostListWrapper>\n    </>\n  );\n};\nexport default PostsPage;\n\ninterface Data {\n  readonly allMarkdownPost: {\n    readonly group: {\n      readonly fieldValue: Language;\n      readonly nodes: DataMarkdownPost[];\n    }[];\n  };\n}\ninterface DataMarkdownPost {\n  readonly title: string;\n  readonly date: string;\n  readonly dateForSort: string;\n  readonly postPath: string;\n  readonly draft: boolean;\n  readonly parent: {\n    readonly excerpt: string;\n  };\n} \nconst query = graphql`\n  query {\n    allMarkdownPost {\n      group(field: language) {\n        fieldValue\n        nodes {\n          title\n          date(fromNow: true)\n          dateForSort: date\n          postPath\n          draft\n          parent {\n            ... on MarkdownRemark {\n              excerpt(format: HTML, pruneLength: 100, truncate: true)\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\nconst refineData = (data: Data, targetLanguage: Language): PostInfo[] => {\n  const targetGroup =\n    data.allMarkdownPost.group\n      .find(({ fieldValue }) => fieldValue === targetLanguage);\n\n  return (targetGroup?.nodes ?? [])\n    .filter((post) => process.env.NODE_ENV === 'development' || !post.draft)\n    .sort((post0, post1) => Date.parse(post1.dateForSort) - Date.parse(post0.dateForSort))\n    .map(({ dateForSort, draft, parent, ...postInfo }) => ({\n      ...postInfo,\n      /* Try to make the excerpt WAI compatible */\n      excerpt: parent.excerpt\n        .replace(/<a>/g, '<span>')\n        .replace(/<a /g, '<span ')\n        .replace(/<\\/a>/g, '</span>'),\n    }));\n};\n\nconst PostListWrapper = styled.main({\n  margin: '0 20vw',\n  marginTop: '60px',\n\n  width: '60vw',\n  minHeight: '50vh',\n});\n","import PostsPage from '../../components/pages/posts';\n\nexport default PostsPage;\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["backgroundSrc","title","___EmotionJSX","Root","TitleText","_styled","display","width","height","backgroundPosition","backgroundSize","backgroundColor","alignItems","C","backgroundImage","paddingLeft","color","fontWeight","fontSize","postInfos","PostListRoot","map","postInfo","Fragment","key","postPath","Post","PostRoot","PostLink","to","PostTitle","FlexSpacer","PostDate","date","PostExcerpt","dangerouslySetInnerHTML","__html","excerpt","Link","flexWrap","flexDirection","marginBottom","alignSelf","marginLeft","marginRight","marginTop","data","useStaticQuery","query","language","useLanguage","posts","refineData","SEO","description","pathname","NavigationBar","PageTitle","PostListWrapper","PostList","targetLanguage","targetGroup","allMarkdownPost","group","find","fieldValue","nodes","filter","post","draft","sort","post0","post1","Date","parse","dateForSort","parent","replace","_objectWithoutPropertiesLoose","source","excluded","i","target","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}