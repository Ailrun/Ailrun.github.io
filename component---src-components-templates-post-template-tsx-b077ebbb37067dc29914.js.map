{"version":3,"file":"component---src-components-templates-post-template-tsx-b077ebbb37067dc29914.js","mappings":"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","sources":["webpack://valhala-of-valkyrie/./src/hooks/useOnLine.ts","webpack://valhala-of-valkyrie/./src/utils/typeHelpers.ts","webpack://valhala-of-valkyrie/./src/components/disqus/DiscussionEmbed.tsx","webpack://valhala-of-valkyrie/./src/components/Post.tsx","webpack://valhala-of-valkyrie/./src/components/templates/PostTemplate.tsx","webpack://valhala-of-valkyrie/./node_modules/@babel/runtime/helpers/esm/objectWithoutPropertiesLoose.js"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useOnLine = (): boolean => {\n  const [isOnline, setIsOnline] = useState(() => {\n    if (typeof navigator === 'undefined') {\n      return false;\n    }\n\n    return navigator.onLine;\n  });\n\n  useEffect(() => {\n    function toOnline(): void {\n      setIsOnline(true);\n    }\n\n    function toOffline(): void {\n      setIsOnline(false);\n    }\n\n    window.addEventListener('online', toOnline);\n    window.addEventListener('offline', toOffline);\n\n    return (): void => {\n      window.removeEventListener('online', toOnline);\n      window.removeEventListener('offline', toOffline);\n    };\n  }, []);\n\n  return isOnline;\n};\nexport default useOnLine;\n","export const assert: (value: unknown) => asserts value = (value) => {\n  if (!value) {\n    /* eslint-disable-next-line @typescript-eslint/restrict-template-expressions */\n    throw TypeError(`Assertion failed: ${value} is not true`);\n  }\n};\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { assert } from '../../utils/typeHelpers';\n\nexport interface Props {\n  readonly shortname: string;\n  readonly url: string;\n  readonly identifier: string;\n  readonly title: string;\n  onNewComment?(comment: { readonly id: string; readonly text: string }): void;\n}\nconst DiscussionEmbed: React.FC<Props> = ({ shortname, url, identifier, title, onNewComment }) => {\n  const disqusThreadRef = useRef<HTMLDivElement>(null);\n  const [viewed, setViewed] = useState(false);\n\n  useEffect(() => {\n    if (!('onscroll' in window)) {\n      /*\n       * If scroll event is not supported,\n       * just pretend this discussion has been viewed\n       */\n      return setViewed(true);\n    }\n\n    assert(disqusThreadRef.current);\n    const lastDisqusThread = disqusThreadRef.current;\n\n    function isDisqusThreadInScreen(): boolean {\n      const disqusThreadBoundingRect = lastDisqusThread.getBoundingClientRect();\n\n      return window.innerHeight * 2 > disqusThreadBoundingRect.top;\n    }\n\n    function handleScroll(): void {\n      if (isDisqusThreadInScreen()) {\n        window.removeEventListener('scroll', handleScroll);\n\n        setViewed(true);\n      }\n    }\n\n    if (isDisqusThreadInScreen()) {\n      return setViewed(true);\n    }\n\n    window.addEventListener('scroll', handleScroll);\n\n    return (): void => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!viewed) {\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n    (window as any).disqus_config = function (this: any): void {\n      /* eslint-disable react/no-this-in-sfc */\n      this.page.url = url;\n      this.page.identifier = identifier;\n      this.page.title = title;\n\n      this.callbacks.onNewComment =\n        typeof onNewComment !== 'undefined' ?\n          [onNewComment] :\n          [];\n      /* eslint-enable react/no-this-in-sfc */\n    };\n    (window as any).disqus_shortname = shortname;\n\n    const script = window.document.createElement('script');\n    script.async = true;\n    script.src = `https://${shortname}.disqus.com/embed.js`;\n\n    window.document.body.appendChild(script);\n\n    assert(disqusThreadRef.current);\n    const lastDisqusThread = disqusThreadRef.current;\n\n    return (): void => {\n      window.document.body.removeChild(script);\n      /* eslint-disable-next-line @typescript-eslint/no-unsafe-call */\n      (window as any).DISQUS?.reset({});\n\n      try {\n        delete (window as any).DISQUS;\n      } catch {\n        (window as any).DISQUS = undefined;\n      }\n\n      while (lastDisqusThread.hasChildNodes()) {\n        assert(lastDisqusThread.firstChild);\n        lastDisqusThread.removeChild(lastDisqusThread.firstChild);\n      }\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n  }, [viewed, shortname, url, identifier, title, onNewComment]);\n\n  return (\n    <div ref={disqusThreadRef} id='disqus_thread' />\n  );\n};\nDiscussionEmbed.defaultProps = {\n  onNewComment: undefined,\n};\nexport default DiscussionEmbed;\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport useOnLine from '../hooks/useOnLine';\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\nimport DiscussionEmbed, { Props as DiscussionEmbedProps } from './disqus/DiscussionEmbed';\n\ninterface Props {\n  readonly gatsbyShortname: string;\n  readonly postInfo: PostInfo;\n}\nconst Post: React.FC<Props> = ({ gatsbyShortname, postInfo }) => {\n  return (\n    <PostRoot>\n      <PostHeader>\n        <PostTitle>{postInfo.title}</PostTitle>\n        <FlexSpacer />\n        <PostDate>{postInfo.date}</PostDate>\n      </PostHeader>\n      <PostSeparator />\n      <PostContent\n        dangerouslySetInnerHTML={{ __html: postInfo.html }}\n      />\n      {\n        !postInfo.draft ? (\n          <>\n            <PostDisqusSeparator />\n            <PostDisqus\n              shortname={gatsbyShortname}\n              url={`https://ailrun.github.io${postInfo.postPath}`}\n              identifier={postInfo.postPath}\n              title={postInfo.title}\n            />\n          </>\n        ) : null\n      }\n    </PostRoot>\n  );\n};\nexport default Post;\n\nexport interface PostInfo {\n  readonly title: string;\n  readonly date: string;\n  readonly html: string;\n  readonly postPath: string;\n  readonly draft: boolean;\n}\n\nconst PostRoot = styled.article({\n  margin: '0 auto',\n\n  width: '50em',\n\n  paddingTop: C.navigationBarHeight,\n\n  overflowY: 'hidden',\n\n  [C.mediaQueries[0]]: {\n    width: '90%',\n  },\n});\n\nconst PostHeader = styled.header({\n  display: 'flex',\n\n  width: '100%',\n  paddingTop: '1em',\n\n  alignItems: 'center',\n});\n\nconst PostTitle = styled.h1({\n  fontSize: C.fontHugeSize,\n  color: C.textBlack,\n});\n\nconst PostDate = styled.span({\n  marginRight: '1em',\n\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n});\n\nconst PostSeparator = styled.hr({\n  margin: '1em 0',\n\n  color: C.textLightBlack,\n});\n\nconst PostContent = styled.section(\n  {\n    marginBottom: '3em',\n  },\n  C.markdown,\n);\n\nconst PostDisqusSeparator = styled.hr({\n  color: C.textLightBlack,\n});\n\nconst PostDisqus: React.FC<DiscussionEmbedProps> = ({ shortname, url, identifier, title, onNewComment }) => {\n  const onLine = useOnLine();\n\n  if (!onLine) {\n    return (\n      <PostDisqusLoadError />\n    );\n  }\n\n  return (\n    <DiscussionEmbed {...{ shortname, url, identifier, title, onNewComment }} />\n  );\n};\n\nconst PostDisqusLoadError: React.FC<unknown> = () => {\n  return (\n    <PostDisqusLoadErrorWrapper>\n      Unable to Access Network...\n      <br />\n      Cannot Load Disqus Comments\n    </PostDisqusLoadErrorWrapper>\n  );\n};\n\nconst PostDisqusLoadErrorWrapper = styled.p({\n  display: 'block',\n  marginTop: '2em',\n  marginBottom: '4em',\n\n  textAlign: 'center',\n  color: C.textVeryLightBlack,\n  fontSize: C.fontBaseSize,\n});\n","import 'katex/dist/katex.min.css';\nimport styled from '@emotion/styled';\nimport { PageRendererProps, graphql } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../../hooks/useLanguage';\nimport NavigationBar from '../NavigationBar';\nimport Post, { PostInfo } from '../Post';\nimport SEO from '../SEO';\n\nexport interface Props extends PageRendererProps {\n  readonly data: Data;\n}\nconst PostTemplate: React.FC<Props> = ({ data }) => {\n  const language = useLanguage();\n  const post = refineData(data);\n\n  return (\n    <>\n      <SEO\n        title={post.title}\n        description={data.markdownPost.parent.excerpt}\n        pathname={post.postPath}\n        og={{\n          type: 'article',\n          additional: {\n            author: `https://ailrun.github.io/${language}/about`,\n            published_time: post.date,\n            section: 'Science',\n          },\n        }}\n      />\n      <NavigationBar />\n      <PostWrapper>\n        <Post\n          gatsbyShortname={process.env.GATSBY_DISQUS_NAME as string}\n          postInfo={post}\n        />\n      </PostWrapper>\n    </>\n  );\n};\nexport default PostTemplate;\n\ninterface Data {\n  readonly markdownPost: DataMarkdownPost;\n}\ninterface DataMarkdownPost {\n  readonly title: string;\n  readonly date: string;\n  readonly postPath: string;\n  readonly draft: boolean;\n  readonly parent: {\n    readonly html: string;\n    readonly excerpt: string;\n  };\n}\nexport const query = graphql`\n  query ($id: String) {\n    markdownPost(id: { eq: $id }) {\n      title\n      date(fromNow: true)\n      postPath\n      draft\n      parent {\n        ... on MarkdownRemark {\n          html\n          excerpt(format: PLAIN, pruneLength: 100, truncate: true)\n        }\n      }\n    }\n  }\n`;\n\nconst refineData = (data: Data): PostInfo => {\n  const { parent, ...postInfo } = data.markdownPost;\n\n  return {\n    ...postInfo,\n    html: parent.html,\n  };\n};\n\nconst PostWrapper = styled.main({\n  width: '100vw',\n  minHeight: '100vh',\n\n  backgroundColor: 'rgba(255, 255, 233, 0.84)',\n});\n","export default function _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}"],"names":["useState","navigator","onLine","isOnline","setIsOnline","useEffect","toOnline","toOffline","window","addEventListener","removeEventListener","assert","value","TypeError","DiscussionEmbed","shortname","url","identifier","title","onNewComment","disqusThreadRef","useRef","viewed","setViewed","current","lastDisqusThread","isDisqusThreadInScreen","disqusThreadBoundingRect","getBoundingClientRect","innerHeight","top","handleScroll","disqus_config","this","page","callbacks","disqus_shortname","script","document","createElement","async","src","body","appendChild","removeChild","DISQUS","reset","undefined","hasChildNodes","firstChild","___EmotionJSX","ref","id","defaultProps","gatsbyShortname","postInfo","PostRoot","PostHeader","PostTitle","FlexSpacer","PostDate","date","PostSeparator","PostContent","dangerouslySetInnerHTML","__html","html","draft","PostDisqusSeparator","PostDisqus","postPath","_styled","margin","width","paddingTop","C","overflowY","fontSize","color","marginRight","useOnLine","PostDisqusLoadError","PostDisqusLoadErrorWrapper","display","marginTop","marginBottom","textAlign","data","language","useLanguage","post","refineData","SEO","description","markdownPost","parent","excerpt","pathname","og","type","additional","author","published_time","section","NavigationBar","PostWrapper","Post","process","target","name","styles","_objectWithoutPropertiesLoose","source","excluded","key","i","sourceKeys","Object","keys","length","indexOf"],"sourceRoot":""}