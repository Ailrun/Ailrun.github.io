{"version":3,"file":"component---src-components-templates-post-template-tsx-12f5ef5f2fa8736b86a1.js","mappings":"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","sources":["webpack://valhala-of-valkyrie/./src/hooks/useOnLine.ts","webpack://valhala-of-valkyrie/./src/utils/typeHelpers.ts","webpack://valhala-of-valkyrie/./src/components/disqus/DiscussionEmbed.tsx","webpack://valhala-of-valkyrie/./src/components/Post.tsx","webpack://valhala-of-valkyrie/./src/components/templates/PostTemplate.tsx"],"sourcesContent":["import { useEffect, useState } from 'react';\n\nconst useOnLine = (): boolean => {\n  const [isOnline, setIsOnline] = useState(() => {\n    if (typeof navigator === 'undefined') {\n      return false;\n    }\n\n    return navigator.onLine;\n  });\n\n  useEffect(() => {\n    function toOnline(): void {\n      setIsOnline(true);\n    }\n\n    function toOffline(): void {\n      setIsOnline(false);\n    }\n\n    window.addEventListener('online', toOnline);\n    window.addEventListener('offline', toOffline);\n\n    return (): void => {\n      window.removeEventListener('online', toOnline);\n      window.removeEventListener('offline', toOffline);\n    };\n  }, []);\n\n  return isOnline;\n};\nexport default useOnLine;\n","export const assert: (value: unknown) => asserts value = (value) => {\n  if (!value) {\n    /* eslint-disable-next-line @typescript-eslint/restrict-template-expressions */\n    throw TypeError(`Assertion failed: ${value} is not true`);\n  }\n};\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { assert } from '../../utils/typeHelpers';\n\nexport interface Props {\n  readonly shortname: string;\n  readonly url: string;\n  readonly identifier: string;\n  readonly title: string;\n  onNewComment?(comment: { readonly id: string; readonly text: string }): void;\n}\nconst DiscussionEmbed: React.FC<Props> = ({ shortname, url, identifier, title, onNewComment }) => {\n  const disqusThreadRef = useRef<HTMLDivElement>(null);\n  const [viewed, setViewed] = useState(false);\n\n  useEffect(() => {\n    if (!('onscroll' in window)) {\n      /*\n       * If scroll event is not supported,\n       * just pretend this discussion has been viewed\n       */\n      return setViewed(true);\n    }\n\n    assert(disqusThreadRef.current);\n    const lastDisqusThread = disqusThreadRef.current;\n\n    function isDisqusThreadInScreen(): boolean {\n      const disqusThreadBoundingRect = lastDisqusThread.getBoundingClientRect();\n\n      return window.innerHeight * 2 > disqusThreadBoundingRect.top;\n    }\n\n    function handleScroll(): void {\n      if (isDisqusThreadInScreen()) {\n        window.removeEventListener('scroll', handleScroll);\n\n        setViewed(true);\n      }\n    }\n\n    if (isDisqusThreadInScreen()) {\n      return setViewed(true);\n    }\n\n    window.addEventListener('scroll', handleScroll);\n\n    return (): void => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!viewed) {\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n    (window as any).disqus_config = function (this: any): void {\n      /* eslint-disable react/no-this-in-sfc */\n      this.page.url = url;\n      this.page.identifier = identifier;\n      this.page.title = title;\n\n      this.callbacks.onNewComment =\n        typeof onNewComment !== 'undefined' ?\n          [onNewComment] :\n          [];\n      /* eslint-enable react/no-this-in-sfc */\n    };\n    (window as any).disqus_shortname = shortname;\n\n    const script = window.document.createElement('script');\n    script.async = true;\n    script.src = `https://${shortname}.disqus.com/embed.js`;\n\n    window.document.body.appendChild(script);\n\n    assert(disqusThreadRef.current);\n    const lastDisqusThread = disqusThreadRef.current;\n\n    return (): void => {\n      window.document.body.removeChild(script);\n      /* eslint-disable-next-line @typescript-eslint/no-unsafe-call */\n      (window as any).DISQUS?.reset({});\n\n      try {\n        delete (window as any).DISQUS;\n      } catch {\n        (window as any).DISQUS = undefined;\n      }\n\n      while (lastDisqusThread.hasChildNodes()) {\n        assert(lastDisqusThread.firstChild);\n        lastDisqusThread.removeChild(lastDisqusThread.firstChild);\n      }\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n  }, [viewed, shortname, url, identifier, title, onNewComment]);\n\n  return (\n    <div ref={disqusThreadRef} id='disqus_thread' />\n  );\n};\nDiscussionEmbed.defaultProps = {\n  onNewComment: undefined,\n};\nexport default DiscussionEmbed;\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport useOnLine from '../hooks/useOnLine';\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\nimport DiscussionEmbed, { Props as DiscussionEmbedProps } from './disqus/DiscussionEmbed';\n\ninterface Props {\n  readonly gatsbyShortname: string;\n  readonly postInfo: PostInfo;\n}\nconst Post: React.FC<Props> = ({ gatsbyShortname, postInfo }) => {\n  return (\n    <PostRoot>\n      <PostHeader>\n        <PostTitle>{postInfo.title}</PostTitle>\n        <FlexSpacer />\n        <PostDate>{postInfo.date}</PostDate>\n      </PostHeader>\n      <PostSeparator />\n      <PostContent\n        dangerouslySetInnerHTML={{ __html: postInfo.html }}\n      />\n      {\n        !postInfo.draft ? (\n          <>\n            <PostDisqusSeparator />\n            <PostDisqus\n              shortname={gatsbyShortname}\n              url={`https://ailrun.github.io${postInfo.postPath}`}\n              identifier={postInfo.postPath}\n              title={postInfo.title}\n            />\n          </>\n        ) : null\n      }\n    </PostRoot>\n  );\n};\nexport default Post;\n\nexport interface PostInfo {\n  readonly title: string;\n  readonly date: string;\n  readonly html: string;\n  readonly postPath: string;\n  readonly draft: boolean;\n}\n\nconst PostRoot = styled.article({\n  margin: '0 auto',\n\n  width: '50em',\n\n  paddingTop: C.navigationBarHeight,\n\n  overflowY: 'hidden',\n\n  [C.mediaQueries[0]]: {\n    width: '90%',\n  },\n});\n\nconst PostHeader = styled.header({\n  display: 'flex',\n\n  width: '100%',\n  paddingTop: '1em',\n\n  alignItems: 'center',\n});\n\nconst PostTitle = styled.h1({\n  fontSize: C.fontHugeSize,\n  color: C.textBlack,\n});\n\nconst PostDate = styled.span({\n  marginRight: '1em',\n\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n});\n\nconst PostSeparator = styled.hr({\n  margin: '1em 0',\n\n  color: C.textLightBlack,\n});\n\nconst PostContent = styled.section(\n  {\n    marginBottom: '3em',\n  },\n  C.markdown,\n);\n\nconst PostDisqusSeparator = styled.hr({\n  color: C.textLightBlack,\n});\n\nconst PostDisqus: React.FC<DiscussionEmbedProps> = ({ shortname, url, identifier, title, onNewComment }) => {\n  const onLine = useOnLine();\n\n  if (!onLine) {\n    return (\n      <PostDisqusLoadError />\n    );\n  }\n\n  return (\n    <DiscussionEmbed {...{ shortname, url, identifier, title, onNewComment }} />\n  );\n};\n\nconst PostDisqusLoadError: React.FC<unknown> = () => {\n  return (\n    <PostDisqusLoadErrorWrapper>\n      Unable to Access Network...\n      <br />\n      Cannot Load Disqus Comments\n    </PostDisqusLoadErrorWrapper>\n  );\n};\n\nconst PostDisqusLoadErrorWrapper = styled.p({\n  display: 'block',\n  marginTop: '2em',\n  marginBottom: '4em',\n\n  textAlign: 'center',\n  color: C.textVeryLightBlack,\n  fontSize: C.fontBaseSize,\n});\n","import 'katex/dist/katex.min.css';\nimport styled from '@emotion/styled';\nimport { PageProps, graphql, HeadProps } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../../hooks/useLanguage';\nimport NavigationBar from '../NavigationBar';\nimport Post, { PostInfo } from '../Post';\nimport SEO from '../SEO';\n\nconst PostTemplate: React.FC<PageProps<Queries.PostInformationFragment>> = ({ data }) => {\n  const post = refineData(data);\n\n  return (\n    <>\n      <NavigationBar />\n      <PostWrapper>\n        <Post\n          gatsbyShortname={process.env.GATSBY_DISQUS_NAME as string}\n          postInfo={post}\n        />\n      </PostWrapper>\n    </>\n  );\n};\nexport default PostTemplate;\n\nexport const Head: React.FC<HeadProps<Queries.PostInformationFragment & Queries.SEOInformationFragment>> = ({ data }) => {\n  const language = useLanguage();\n  const post = refineData(data);\n\n  return (\n    <SEO\n      title={post.title}\n      description={(data.markdownPost!.parent as Queries.MarkdownRemark).excerpt!}\n      pathname={post.postPath}\n      og={{\n        type: 'article',\n        additional: {\n          author: `https://ailrun.github.io/${language}/about`,\n          published_time: post.date,\n          section: 'Science',\n        },\n      }}\n      data={data}\n    />\n  );\n};\n\nexport const query = graphql`\n  fragment PostInformation on Query {\n    markdownPost(id: { eq: $id }) {\n      title\n      date(fromNow: true)\n      postPath\n      draft\n      parent {\n        ... on MarkdownRemark {\n          html\n          excerpt(format: PLAIN, pruneLength: 100, truncate: true)\n        }\n      }\n    }\n  }\n\n  query ($id: String) {\n    ...PostInformation\n    ...SEOInformation\n  }\n`;\n\nconst refineData = (data: Queries.PostInformationFragment): PostInfo => {\n  const { title, date, postPath, draft, parent } = data.markdownPost!;\n\n  return {\n    title: title!,\n    date: date!,\n    postPath: postPath!,\n    draft: draft!,\n    html: (parent as Queries.MarkdownRemark).html!,\n  };\n};\n\nconst PostWrapper = styled.main({\n  width: '100vw',\n  minHeight: '100vh',\n\n  backgroundColor: 'rgba(255, 255, 233, 0.84)',\n});\n"],"names":["useOnLine","isOnline","setIsOnline","useState","navigator","onLine","useEffect","toOnline","toOffline","window","addEventListener","removeEventListener","assert","value","TypeError","DiscussionEmbed","_ref","shortname","url","identifier","title","onNewComment","disqusThreadRef","useRef","viewed","setViewed","current","lastDisqusThread","isDisqusThreadInScreen","disqusThreadBoundingRect","getBoundingClientRect","innerHeight","top","handleScroll","disqus_config","this","page","callbacks","disqus_shortname","script","document","createElement","async","src","body","appendChild","removeChild","DISQUS","_DISQUS","reset","undefined","hasChildNodes","firstChild","___EmotionJSX","ref","id","defaultProps","gatsbyShortname","postInfo","PostRoot","PostHeader","PostTitle","FlexSpacer","PostDate","date","PostSeparator","PostContent","dangerouslySetInnerHTML","__html","html","draft","PostDisqusSeparator","PostDisqus","postPath","_styled","margin","width","paddingTop","C","overflowY","fontSize","color","marginRight","_ref2","PostDisqusLoadError","PostDisqusLoadErrorWrapper","display","marginTop","marginBottom","textAlign","data","post","refineData","NavigationBar","PostWrapper","Post","process","Head","language","useLanguage","SEO","description","markdownPost","parent","excerpt","pathname","og","type","additional","author","published_time","section","target","name","styles"],"sourceRoot":""}