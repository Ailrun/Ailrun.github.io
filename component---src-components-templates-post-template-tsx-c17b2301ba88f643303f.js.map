{"version":3,"sources":["webpack:///./src/components/FlexSpacer.ts","webpack:///./src/hooks/useOnLine.ts","webpack:///./src/utils/typeHelpers.ts","webpack:///./src/components/disqus/DiscussionEmbed.tsx","webpack:///./src/components/Post.tsx","webpack:///./src/components/templates/PostTemplate.tsx","webpack:///./src/components/NavigationBar.tsx","webpack:///./src/styles/constants.ts"],"names":["FlexSpacer","useOnLine","useState","navigator","onLine","isOnline","setIsOnline","useEffect","toOnline","toOffline","window","addEventListener","removeEventListener","assert","value","TypeError","DiscussionEmbed","shortname","url","identifier","title","onNewComment","disqusThreadRef","useRef","viewed","setViewed","current","lastDisqusThread","isDisqusThreadInScreen","disqusThreadBoundingRect","getBoundingClientRect","innerHeight","top","handleScroll","disqus_config","this","page","callbacks","disqus_shortname","script","document","createElement","async","src","body","appendChild","removeChild","DISQUS","reset","undefined","hasChildNodes","firstChild","ref","id","Post","gatsbyShortname","postInfo","PostRoot","PostHeader","PostTitle","PostDate","date","PostSeparator","PostContent","dangerouslySetInnerHTML","__html","html","draft","PostDisqusSeparator","postPath","margin","width","paddingTop","C","overflowY","fontSize","color","marginRight","PostDisqus","PostDisqusLoadError","PostDisqusLoadErrorWrapper","display","marginTop","marginBottom","textAlign","PostTemplate","data","language","useLanguage","post","refineData","SEO","description","markdownPost","parent","excerpt","pathname","og","type","additional","author","published_time","section","NavigationBar","PostWrapper","process","query","Root","Title","to","NavigationList","getNavigationItems","map","navigationItem","NavigationItem","key","text","position","left","zIndex","height","backgroundColor","alignItems","Link","padding","NavigationItemRoot","Language","KO","mediaQueries","navigationBarHeight","fontSmallSize","fontBaseSize","fontLargeSize","fontHugeSize","fontGiantSize","textWhite","textBlack","textLightBlack","textVeryLightBlack","backgroundBlack","fontDancing","markdown","css","lineHeight","content","h2","h3","h4","p","textIndent","marginLeft","li","table","a","textDecoration","code","overflow","borderRadius","whiteSpace","fontFamily","pre","blockquote","summary","cursor","userSelect","borderCollapse","borderTopStyle","borderColor","borderStyle","borderWidth","border"],"mappings":"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","file":"component---src-components-templates-post-template-tsx-c17b2301ba88f643303f.js","sourcesContent":["import styled from '@emotion/styled';\n\nconst FlexSpacer = styled.div({\n  flexGrow: 1,\n});\nexport default FlexSpacer;\n","import { useEffect, useState } from 'react';\n\nconst useOnLine = (): boolean => {\n  const [isOnline, setIsOnline] = useState(() => {\n    if (typeof navigator === 'undefined') {\n      return false;\n    }\n\n    return navigator.onLine;\n  });\n\n  useEffect(() => {\n    function toOnline(): void {\n      setIsOnline(true);\n    }\n\n    function toOffline(): void {\n      setIsOnline(false);\n    }\n\n    window.addEventListener('online', toOnline);\n    window.addEventListener('offline', toOffline);\n\n    return (): void => {\n      window.removeEventListener('online', toOnline);\n      window.removeEventListener('offline', toOffline);\n    };\n  }, []);\n\n  return isOnline;\n};\nexport default useOnLine;\n","export const assert: (value: unknown) => asserts value = (value) => {\n  if (!value) {\n    /* eslint-disable-next-line @typescript-eslint/restrict-template-expressions */\n    throw TypeError(`Assertion failed: ${value} is not true`);\n  }\n};\n","import React, { useEffect, useRef, useState } from 'react';\n\nimport { assert } from '../../utils/typeHelpers';\n\nexport interface Props {\n  readonly shortname: string;\n  readonly url: string;\n  readonly identifier: string;\n  readonly title: string;\n  onNewComment?(comment: { readonly id: string; readonly text: string }): void;\n}\nconst DiscussionEmbed: React.FC<Props> = ({ shortname, url, identifier, title, onNewComment }) => {\n  const disqusThreadRef = useRef<HTMLDivElement>(null);\n  const [viewed, setViewed] = useState(false);\n\n  useEffect(() => {\n    if (!('onscroll' in window)) {\n      /*\n       * If scroll event is not supported,\n       * just pretend this discussion has been viewed\n       */\n      return setViewed(true);\n    }\n\n    assert(disqusThreadRef.current);\n    const lastDisqusThread = disqusThreadRef.current;\n\n    function isDisqusThreadInScreen(): boolean {\n      const disqusThreadBoundingRect = lastDisqusThread.getBoundingClientRect();\n\n      return window.innerHeight * 2 > disqusThreadBoundingRect.top;\n    }\n\n    function handleScroll(): void {\n      if (isDisqusThreadInScreen()) {\n        window.removeEventListener('scroll', handleScroll);\n\n        setViewed(true);\n      }\n    }\n\n    if (isDisqusThreadInScreen()) {\n      return setViewed(true);\n    }\n\n    window.addEventListener('scroll', handleScroll);\n\n    return (): void => {\n      window.removeEventListener('scroll', handleScroll);\n    };\n  }, []);\n\n  useEffect(() => {\n    if (!viewed) {\n      return;\n    }\n\n    /* eslint-disable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n    (window as any).disqus_config = function (this: any): void {\n      /* eslint-disable react/no-this-in-sfc */\n      this.page.url = url;\n      this.page.identifier = identifier;\n      this.page.title = title;\n\n      this.callbacks.onNewComment =\n        typeof onNewComment !== 'undefined' ?\n          [onNewComment] :\n          [];\n      /* eslint-enable react/no-this-in-sfc */\n    };\n    (window as any).disqus_shortname = shortname;\n\n    const script = window.document.createElement('script');\n    script.async = true;\n    script.src = `https://${shortname}.disqus.com/embed.js`;\n\n    window.document.body.appendChild(script);\n\n    assert(disqusThreadRef.current);\n    const lastDisqusThread = disqusThreadRef.current;\n\n    return (): void => {\n      window.document.body.removeChild(script);\n      /* eslint-disable-next-line @typescript-eslint/no-unsafe-call */\n      (window as any).DISQUS?.reset({});\n\n      try {\n        delete (window as any).DISQUS;\n      } catch {\n        (window as any).DISQUS = undefined;\n      }\n\n      while (lastDisqusThread.hasChildNodes()) {\n        assert(lastDisqusThread.firstChild);\n        lastDisqusThread.removeChild(lastDisqusThread.firstChild);\n      }\n    };\n    /* eslint-enable @typescript-eslint/no-explicit-any, @typescript-eslint/no-unsafe-member-access */\n  }, [viewed, shortname, url, identifier, title, onNewComment]);\n\n  return (\n    <div ref={disqusThreadRef} id='disqus_thread' />\n  );\n};\nexport default DiscussionEmbed;\n","import styled from '@emotion/styled';\nimport React from 'react';\n\nimport useOnLine from '../hooks/useOnLine';\nimport * as C from '../styles/constants';\n\nimport FlexSpacer from './FlexSpacer';\nimport DiscussionEmbed, { Props as DiscussionEmbedProps } from './disqus/DiscussionEmbed';\n\ninterface Props {\n  readonly gatsbyShortname: string;\n  readonly postInfo: PostInfo;\n}\nconst Post: React.FC<Props> = ({ gatsbyShortname, postInfo }) => {\n  return (\n    <PostRoot>\n      <PostHeader>\n        <PostTitle>{postInfo.title}</PostTitle>\n        <FlexSpacer />\n        <PostDate>{postInfo.date}</PostDate>\n      </PostHeader>\n      <PostSeparator />\n      <PostContent\n        dangerouslySetInnerHTML={{ __html: postInfo.html }}\n      />\n      {\n        !postInfo.draft ? (\n          <>\n            <PostDisqusSeparator />\n            <PostDisqus\n              shortname={gatsbyShortname}\n              url={`https://ailrun.github.io${postInfo.postPath}`}\n              identifier={postInfo.postPath}\n              title={postInfo.title}\n            />\n          </>\n        ) : null\n      }\n    </PostRoot>\n  );\n};\nexport default Post;\n\nexport interface PostInfo {\n  readonly title: string;\n  readonly date: string;\n  readonly html: string;\n  readonly postPath: string;\n  readonly draft: boolean;\n}\n\nconst PostRoot = styled.article({\n  margin: '0 auto',\n\n  width: '50em',\n\n  paddingTop: C.navigationBarHeight,\n\n  overflowY: 'hidden',\n\n  [C.mediaQueries[0]]: {\n    width: '90%',\n  },\n});\n\nconst PostHeader = styled.header({\n  display: 'flex',\n\n  width: '100%',\n  paddingTop: '1em',\n\n  alignItems: 'center',\n});\n\nconst PostTitle = styled.h1({\n  fontSize: C.fontHugeSize,\n  color: C.textBlack,\n});\n\nconst PostDate = styled.span({\n  marginRight: '1em',\n\n  fontSize: C.fontSmallSize,\n  color: C.textVeryLightBlack,\n});\n\nconst PostSeparator = styled.hr({\n  margin: '1em 0',\n\n  color: C.textLightBlack,\n});\n\nconst PostContent = styled.section(\n  {\n    marginBottom: '3em',\n  },\n  C.markdown,\n);\n\nconst PostDisqusSeparator = styled.hr({\n  color: C.textLightBlack,\n});\n\nconst PostDisqus: React.FC<DiscussionEmbedProps> = ({ shortname, url, identifier, title, onNewComment }) => {\n  const onLine = useOnLine();\n\n  if (!onLine) {\n    return (\n      <PostDisqusLoadError />\n    );\n  }\n\n  return (\n    <DiscussionEmbed {...{ shortname, url, identifier, title, onNewComment }} />\n  );\n};\n\nconst PostDisqusLoadError: React.FC<unknown> = () => {\n  return (\n    <PostDisqusLoadErrorWrapper>\n      Unable to Access Network...\n      <br />\n      Cannot Load Disqus Comments\n    </PostDisqusLoadErrorWrapper>\n  );\n};\n\nconst PostDisqusLoadErrorWrapper = styled.p({\n  display: 'block',\n  marginTop: '2em',\n  marginBottom: '4em',\n\n  textAlign: 'center',\n  color: C.textVeryLightBlack,\n  fontSize: C.fontBaseSize,\n});\n","import 'katex/dist/katex.min.css';\nimport styled from '@emotion/styled';\nimport { PageRendererProps, graphql } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../../hooks/useLanguage';\nimport NavigationBar from '../NavigationBar';\nimport Post, { PostInfo } from '../Post';\nimport SEO from '../SEO';\n\nexport interface Props extends PageRendererProps {\n  readonly data: Data;\n}\nconst PostTemplate: React.FC<Props> = ({ data }) => {\n  const language = useLanguage();\n  const post = refineData(data);\n\n  return (\n    <>\n      <SEO\n        title={post.title}\n        description={data.markdownPost.parent.excerpt}\n        pathname={post.postPath}\n        og={{\n          type: 'article',\n          additional: {\n            author: `https://ailrun.github.io/${language}/about`,\n            published_time: post.date,\n            section: 'Science',\n          },\n        }}\n      />\n      <NavigationBar />\n      <PostWrapper>\n        <Post\n          gatsbyShortname={process.env.GATSBY_DISQUS_NAME as string}\n          postInfo={post}\n        />\n      </PostWrapper>\n    </>\n  );\n};\nexport default PostTemplate;\n\ninterface Data {\n  readonly markdownPost: DataMarkdownPost;\n}\ninterface DataMarkdownPost {\n  readonly title: string;\n  readonly date: string;\n  readonly postPath: string;\n  readonly draft: boolean;\n  readonly parent: {\n    readonly html: string;\n    readonly excerpt: string;\n  };\n}\nexport const query = graphql`\n  query ($id: String) {\n    markdownPost(id: { eq: $id }) {\n      title\n      date(fromNow: true)\n      postPath\n      draft\n      parent {\n        ... on MarkdownRemark {\n          html\n          excerpt(format: PLAIN, pruneLength: 100, truncate: true)\n        }\n      }\n    }\n  }\n`;\n\nconst refineData = (data: Data): PostInfo => {\n  const { parent, ...postInfo } = data.markdownPost;\n\n  return {\n    ...postInfo,\n    html: parent.html,\n  };\n};\n\nconst PostWrapper = styled.main({\n  width: '100vw',\n  minHeight: '100vh',\n\n  backgroundColor: 'rgba(255, 255, 233, 0.84)',\n});\n","import styled from '@emotion/styled';\nimport { Link } from 'gatsby';\nimport React from 'react';\n\nimport useLanguage from '../hooks/useLanguage';\nimport * as C from '../styles/constants';\nimport { Language } from '../utils/languages';\n\nimport FlexSpacer from './FlexSpacer';\n\nconst NavigationBar: React.FC<unknown> = () => {\n  const language = useLanguage();\n\n  return (\n    <Root>\n      <Title to={`/${language}/`}>\n        Valhalla of Valkyrie\n      </Title>\n      <FlexSpacer />\n      <NavigationList>\n        {\n          getNavigationItems(language).map((navigationItem) => (\n            <NavigationItem key={navigationItem.text} {...navigationItem} />\n          ))\n        }\n      </NavigationList>\n    </Root>\n  );\n};\nexport default NavigationBar;\n\nconst Root = styled.nav({\n  display: 'flex',\n  position: 'fixed',\n  top: 0,\n  left: 0,\n  zIndex: 1,\n\n  width: '100vw',\n  height: C.navigationBarHeight,\n\n  backgroundColor: C.backgroundBlack,\n\n  color: C.textWhite,\n\n  alignItems: 'center',\n});\n\nconst Title = styled(Link)({\n  display: 'inline-block',\n\n  padding: '0 0.5em',\n\n  fontSize: C.fontLargeSize,\n\n  [C.mediaQueries[0]]: {\n    display: 'none',\n  },\n}, C.fontDancing);\n\nconst NavigationList = styled.ul({\n  display: 'flex',\n\n  /* Approximate maximum size of scrollbar\n   */\n  marginRight: '20px',\n\n  listStyle: 'none',\n\n  alignItems: 'center',\n});\n\ninterface ItemProps {\n  readonly to: string;\n  readonly text: string;\n}\nconst NavigationItem: React.FC<ItemProps> = ({ to, text }) => {\n  return (\n    <NavigationItemRoot>\n      <Link to={to}>\n        {text}\n      </Link>\n    </NavigationItemRoot>\n  );\n};\nconst NavigationItemRoot = styled.li({\n  display: 'inline-block',\n\n  padding: '0 0.5em',\n\n  fontSize: C.fontLargeSize,\n}, C.fontDancing);\n\n\nconst getNavigationItems: (language: Language) => ItemProps[] = (language) => {\n  return [\n    ...(\n      language === Language.KO ?\n        [{ to: `/${language}/posts/`, text: 'Posts' }] :\n        []\n    ),\n    ...[\n      { to: `/${language}/projects/`, text: 'Projects' },\n      { to: `/${language}/about/`, text: 'About' },\n    ],\n  ];\n};\n","import { SerializedStyles, css } from '@emotion/core';\n\nexport const mediaQueries = [\n  '@media (max-width: 60em)',\n];\n\nexport const navigationBarHeight = '42px';\n\nexport const fontSmallSize = '10pt';\nexport const fontBaseSize = '12pt';\nexport const fontLargeSize = '18pt';\nexport const fontHugeSize = '24pt';\nexport const fontGiantSize = '30pt';\n\nexport const textWhite = 'rgba(255, 255, 255, 0.84)';\nexport const textLightWhite = 'rgba(255, 255, 255, 0.73)';\nexport const textBlack = 'rgba(0, 0, 0, 0.84)';\nexport const textLightBlack = 'rgba(0, 0, 0, 0.73)';\nexport const textVeryLightBlack = 'rgba(0, 0, 0, 0.6)';\nexport const textBrown = 'rgba(100, 50, 50, 0.84)';\nexport const textLightBrown = 'rgba(150, 80, 50, 0.84)';\nexport const textRed = 'rgba(108, 0, 0, 0.84)';\nexport const textLightRed = 'rgba(216, 0, 0, 0.84)';\n\nexport const backgroundBlack = 'rgba(0, 0, 0, 0.73)';\nexport const backgroundWhite = 'rgba(255, 255, 255, 0.73)';\nexport const backgroundGray = 'rgba(200, 200, 200, 0.73)';\n\nexport const fontDancing: SerializedStyles = css({\n  fontFamily: '\"Dancing Script\", cursive',\n});\n\nexport const markdown: SerializedStyles = css({\n  color: textBlack,\n  fontSize: '12pt',\n\n  lineHeight: '1.7',\n\n  'h1::before': {\n    content: '\"DON\\'T USE THIS\"',\n  },\n\n  'h2, h3, h4, h5, h6': {\n    marginTop: '1em',\n    marginBottom: '0.5em',\n  },\n\n  h2: {\n    fontSize: '20pt',\n  },\n\n  h3: {\n    fontSize: '18pt',\n  },\n\n  h4: {\n    fontSize: '16pt',\n  },\n\n  p: {\n    margin: '0 1em',\n    marginTop: '1em',\n\n    textIndent: '1em',\n  },\n\n  'ol, ul': {\n    margin: '0 3em',\n    marginTop: '1em',\n\n    '> * > ol, > * > ul': {\n      margin: '0',\n      marginLeft: '0.5em',\n    },\n\n    '+ p': {\n      textIndent: 0,\n    },\n  },\n\n  li: {\n    marginTop: '0.5em',\n    marginLeft: '1em',\n\n    '> p': {\n      margin: 0,\n    },\n\n    '> p:first-of-type': {\n      textIndent: 0,\n    },\n\n    '> .truth-table': {\n      table: {\n        margin: '1em 0',\n      },\n    },\n\n    '> * > li': {\n      marginTop: '0.1em',\n\n      '> * > li': {\n        marginTop: 0,\n      },\n    },\n  },\n\n  a: {\n    color: textLightRed,\n\n    ':hover': {\n      textDecoration: 'underline',\n    },\n\n    ':visited': {\n      color: textRed,\n    },\n  },\n\n  code: {\n    margin: '0 0.5ex',\n\n    padding: '0 0.3em',\n\n    overflow: 'hidden',\n\n    backgroundColor: backgroundGray,\n    borderRadius: '3px',\n\n    whiteSpace: 'nowrap',\n\n    fontFamily: 'monospace',\n  },\n\n  pre: {\n    margin: '0 0.5ex',\n\n    padding: '0 0.3em',\n\n    backgroundColor: backgroundGray,\n    borderRadius: '3px',\n\n    '> code': {\n      margin: 0,\n\n      padding: 0,\n\n      backgroundColor: 'initial',\n      borderRadius: '0',\n    },\n  },\n\n  blockquote: {\n    margin: '1.5em 1.5em',\n\n    color: textVeryLightBlack,\n\n    '+ p': {\n      textIndent: '0',\n    },\n  },\n\n  'details.answer': {\n    display: 'block',\n\n    marginBottom: '0.5em',\n\n    summary: {\n      width: 'fit-content',\n\n      cursor: 'pointer',\n      userSelect: 'none',\n\n      p: {\n        display: 'inline',\n\n        margin: 0,\n\n        textIndent: 0,\n      },\n\n      'p:first-of-type': {\n        marginTop: '-1.5em',\n      },\n\n      '+ p': {\n        margin: 0,\n        marginLeft: '1em',\n      },\n\n      '+ ol, + ul': {\n        margin: '1em 1em',\n      },\n    },\n  },\n\n  '.truth-table': {\n    table: {\n      margin: '1em 3em',\n\n      backgroundColor: backgroundWhite,\n      borderCollapse: 'collapse',\n\n      '> thead + tbody': {\n        borderTopStyle: 'double',\n      },\n\n      '> * > tr': {\n        '> th, > td': {\n          padding: '0 0.5em',\n\n          borderColor: textLightBlack,\n          borderStyle: 'solid',\n          borderWidth: '1px',\n\n          textAlign: 'center',\n        },\n      },\n\n      '+ p': {\n        textIndent: 0,\n      },\n    },\n  },\n\n  'iframe[src^=\"/\"]': {\n    display: 'block',\n    margin: '2em 10%',\n\n    width: '80%',\n\n    border: 'none',\n  },\n});\n"],"sourceRoot":""}